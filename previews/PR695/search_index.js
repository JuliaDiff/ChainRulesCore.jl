var documenterSearchIndex = {"docs":
[{"location":"videos.html#Videos","page":"Videos","title":"Videos","text":"","category":"section"},{"location":"videos.html","page":"Videos","title":"Videos","text":"For people who learn better by video we have a number of videos of talks we have given about the ChainRules project. Note however, that the videos are frozen in time reflecting the state of the packages at the time they were recorded. This documentation is the continuously updated canonical source. However, we have tried to note below each video notes on its correctness.","category":"page"},{"location":"videos.html","page":"Videos","title":"Videos","text":"The talks that follow are in reverse chronological order (i.e. most recent video is first).","category":"page"},{"location":"videos.html#EuroAD-2021:-ChainRules.jl:-AD-system-agnostic-rules-for-JuliaLang","page":"Videos","title":"EuroAD 2021: ChainRules.jl: AD system agnostic rules for JuliaLang","text":"","category":"section"},{"location":"videos.html","page":"Videos","title":"Videos","text":"Presented by Frames White. Slides","category":"page"},{"location":"videos.html","page":"Videos","title":"Videos","text":"This is the talk to watch if you want to understand why the ChainRules project exists, what its challenges are, and how those have been overcome. It is intended less for users of the package, and more for people working in the field of AD more generally. It does also serve as a nice motivation for those first coming across the package as well though.","category":"page"},{"location":"videos.html","page":"Videos","title":"Videos","text":"<div class=\"video-container\">\n<iframe src=\"https://www.youtube.com/embed/B3bC49OmTdk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>","category":"page"},{"location":"videos.html","page":"Videos","title":"Videos","text":"Abstract:","category":"page"},{"location":"videos.html","page":"Videos","title":"Videos","text":"The ChainRules project is a suite of JuliaLang packages that define custom primitives (i.e. rules) for doing AD in JuliaLang. Importantly it is AD system agnostic. It has proved successful in this goal. At present it works with about half a dozen different JuliaLang AD systems. It has been a long journey, but as of August 2021, the core packages have now hit version 1.0.This talk will go through why this is useful, the particular objectives the project had, and the challenges that had to be solved. This talk is not intended as an educational guide for users (For that see our 2021 JuliaCon talk: > Everything you need to know about ChainRules 1.0 (https://live.juliacon.org/talk/LWVB39)). Rather this talk is to share the insights we have had, and likely (inadvertently) the mistakes we have made, with the wider autodiff community. We believe these insights can be informative and useful to efforts in other languages and ecosystems.","category":"page"},{"location":"videos.html#JuliaCon-2021:-Everything-you-need-to-know-about-ChainRules-1.0","page":"Videos","title":"JuliaCon 2021: Everything you need to know about ChainRules 1.0","text":"","category":"section"},{"location":"videos.html","page":"Videos","title":"Videos","text":"Presented by Miha Zgubič. Slides","category":"page"},{"location":"videos.html","page":"Videos","title":"Videos","text":"If you are just wanting to watch a video to learn all about ChainRules and how to use it, watch this one.","category":"page"},{"location":"videos.html","page":"Videos","title":"Videos","text":"note: Slide on opting out is incorrect\nSlide 42 is incorrect (@no_rrule sum_array(A::Diagonal)), in the ChainRulesCore 1.0 release the following syntax is used: @opt_out rrule(::typeof(sum_array), A::Diagonal). This syntax allows us to include rule config information.","category":"page"},{"location":"videos.html","page":"Videos","title":"Videos","text":"<div class=\"video-container\">\n<iframe src=\"https://www.youtube.com/embed/a8ol-1l84gc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>","category":"page"},{"location":"videos.html","page":"Videos","title":"Videos","text":"Abstract:","category":"page"},{"location":"videos.html","page":"Videos","title":"Videos","text":"ChainRules is an automatic differentiation (AD)-independent ecosystem for forward-, reverse-, and mixed-mode primitives. It comprises ChainRules.jl, a collection of primitives for Julia Base, ChainRulesCore.jl, the utilities for defining custom primitives, and ChainRulesTestUtils.jl, the utilities to test primitives using finite differences. This talk provides brief updates on the ecosystem since last year and focuses on when and how to write and test custom primitives.","category":"page"},{"location":"videos.html#JuliaCon-2020:-ChainRules.jl","page":"Videos","title":"JuliaCon 2020: ChainRules.jl","text":"","category":"section"},{"location":"videos.html","page":"Videos","title":"Videos","text":"Presented by Frames White. Slides","category":"page"},{"location":"videos.html","page":"Videos","title":"Videos","text":"This talk is primarily of historical interest. This was the first public presentation of ChainRules. Though the project was a few years old by this stage. A lot of things are still the same; conceptually, but a lot has changed. Most people shouldn't watch this talk now.","category":"page"},{"location":"videos.html","page":"Videos","title":"Videos","text":"warning: Outdated Terminology\nA lot of terminology has changed since this presentation.DoesNotExist → NoTangent\nZero →  ZeroTangent\nComposite{P} → Tangent{T}The talk also says differential in a lot of places where we now would say tangent.","category":"page"},{"location":"videos.html","page":"Videos","title":"Videos","text":"<div class=\"video-container\">\n<iframe src=\"https://www.youtube.com/embed/B4NfkkkJ7rs\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>","category":"page"},{"location":"videos.html","page":"Videos","title":"Videos","text":"Abstract:","category":"page"},{"location":"videos.html","page":"Videos","title":"Videos","text":"The ChainRules project allows package authors to write rules for custom sensitivities (sometimes called custom adjoints) in a way that is not dependent on any particular autodiff (AD) package. It allows authors of AD packages to access a wealth of prewritten custom sensitivities, saving them the effort of writing them all out themselves. ChainRules is the successor to DiffRules.jl and is the native rule system currently used by ForwardDiff2, Zygote and soon ReverseDiff","category":"page"},{"location":"rule_author/debug_mode.html#Debug-Mode","page":"Debug mode","title":"Debug Mode","text":"","category":"section"},{"location":"rule_author/debug_mode.html","page":"Debug mode","title":"Debug mode","text":"ChainRulesCore supports a debug mode which you can use while writing new rules. It provides better error messages. If you are developing some new rules, and you get a weird error message, it is worth enabling debug mode.","category":"page"},{"location":"rule_author/debug_mode.html","page":"Debug mode","title":"Debug mode","text":"There is some overhead to having it enabled, so it is disabled by default.","category":"page"},{"location":"rule_author/debug_mode.html","page":"Debug mode","title":"Debug mode","text":"To enable, redefine the ChainRulesCore.debug_mode function to return true.","category":"page"},{"location":"rule_author/debug_mode.html","page":"Debug mode","title":"Debug mode","text":"ChainRulesCore.debug_mode() = true","category":"page"},{"location":"rule_author/debug_mode.html#Features-of-Debug-Mode:","page":"Debug mode","title":"Features of Debug Mode:","text":"","category":"section"},{"location":"rule_author/debug_mode.html","page":"Debug mode","title":"Debug mode","text":"If you add a Tangent to a primal value, and it was unable to construct a new primal values, then a better error message will be displayed detailing what overloads need to be written to fix this.\nduring add!!, if an InplaceThunk is used, and it runs the code that is supposed to run in place, but the return result is not the input (with updated values), then an error is thrown. Rather than silently using what ever values were returned.","category":"page"},{"location":"maths/nondiff_points.html#What-to-return-for-non-differentiable-points","page":"Non-differentiable Points","title":"What to return for non-differentiable points","text":"","category":"section"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"info: What is the short version?\nIf the function is not-differentiable choose to return something useful rather than erroring. For a branch a function is not differentiable due to e.g. a branch, like abs, your rule can reasonably claim the derivative at that point is the value from either branch, or any value in-between. In particular for local optima (like in the case of abs) claiming the derivative is 0 is a good idea. Similarly, if derivative is from one side is not defined, or is not finite, return the derivative from the other side. Throwing an error, or returning NaN is generally the least useful option.","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"However, contrary to what calculus says most autodiff systems will return an answer for such functions. For example for: abs_left(x) = (x <= 0) ? -x : x, AD will say the derivative at x=0 is -1. Alternatively for:  abs_right(x) = (x < 0) ? -x : x, AD will say the derivative at x=0 is 1. Those two examples are weird since they are equal at all points, but AD claims different derivatives at x=0. The way to fix autodiff systems being weird is to write custom rules. So what rule should we write for this case?","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"The obvious answer, would be to write a rule that throws an error if input at a point where calculus says the derivative is not defined. Another option is to return some error signally value like NaN. Which you can do. However, there is no where to go with an error, the user still wants a derivative; so this is not useful.","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"Let us explore what is useful:","category":"page"},{"location":"maths/nondiff_points.html#Case-Studies","page":"Non-differentiable Points","title":"Case Studies","text":"","category":"section"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"using Plots\ngr(framestyle=:origin, legend=false)","category":"page"},{"location":"maths/nondiff_points.html#Derivative-is-defined-in-usual-sense","page":"Non-differentiable Points","title":"Derivative is defined in usual sense","text":"","category":"section"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"plot(x->x^3)","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"This is the standard case, one can return the derivative that is defined according to school room calculus. Here we would reasonably say that at x=0 the derivative is 3*0^2=0. ","category":"page"},{"location":"maths/nondiff_points.html#Local-Minima-/-Maxima","page":"Non-differentiable Points","title":"Local Minima / Maxima","text":"","category":"section"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"plot(abs)","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"abs is the classic example of a function where the derivative is not defined, as the limit from above is not equal to the limit from below.","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"operatornameabs(0) = lim_h to 0^- dfracoperatornameabs(0)-operatornameabs(0-h)0-h = -1","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"operatornameabs(0) = lim_h to 0^+ dfracoperatornameabs(0)-operatornameabs(0-h)0-h = 1","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"Now, as discussed in the introduction, the AD system would on it's own choose either 1 or -1, depending on implementation.","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"We however have a potentially much nicer answer available to use: 0.","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"This has a number of advantages.","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"It follows the rule that derivatives are zero at local minima (and maxima).\nIf you leave a gradient descent optimizer running it will eventually actually converge absolutely to the point – where as with it being 1 or -1 it would never outright converge it would always flee.","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"Further:","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"It is a perfectly nice member of the subderivative.\nIt is the mean of the derivative on each side; which means that it will agree with central finite differencing at the point.","category":"page"},{"location":"maths/nondiff_points.html#Piecewise-slope-change","page":"Non-differentiable Points","title":"Piecewise slope change","text":"","category":"section"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"plot(x-> x < 0 ? x : 5x)","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"Here we have 3 main options, all are good.","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"We could say the derivative at 0 is:","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"1: which agrees with backwards finite differencing\n5: which agrees with forwards finite differencing\n3: which is the mean of [1, 5], and agrees with central finite differencing","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"All of these options are perfectly nice members of the subderivative. 3 is the arguably the nicest, but it is also the most expensive to compute. In general all are acceptable.","category":"page"},{"location":"maths/nondiff_points.html#Derivative-zero-almost-everywhere","page":"Non-differentiable Points","title":"Derivative zero almost everywhere","text":"","category":"section"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"plot(ceil)","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"Here it is most useful to say the derivative is zero everywhere. The limits are zero from both sides.","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"The other option for x->ceil(x) would be to relax the problem into x->x, and thus  say it is 1 everywhere. But that it too weird, if the user wanted a relaxation of the problem then they would provide one. We can not be imposing that relaxation on to ceil, as it is not reasonable for everyone.","category":"page"},{"location":"maths/nondiff_points.html#Not-defined-on-one-side","page":"Non-differentiable Points","title":"Not defined on one-side","text":"","category":"section"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"plot(x->exp(2log(x)))\nplot!(; xlims=(-10,10), ylims=(-10,10)) #hide","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"We do not have to worry about what to return for the side where it is not defined. As we will never be asked for the derivative at e.g. x=-2.5 since the primal function errors. But we do need to worry about at the boundary – if that boundary point doesn't error.","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"Since we will never be asked about the left-hand side (as the primal errors), we can use just the right-hand side derivative. In this case giving 0.0.","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"Also nice in this case is that it agrees with the symbolic simplification of x->exp(2log(x)) into x->x^2.","category":"page"},{"location":"maths/nondiff_points.html#Derivative-nonfinite-and-same-on-both-sides","page":"Non-differentiable Points","title":"Derivative nonfinite and same on both sides","text":"","category":"section"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"plot(cbrt)","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"Here we have no real choice but to say the derivative at 0 is Inf. We could consider as an alternative saying some large but finite value. However, if too large it will just overflow rapidly anyway; and if too small it will not dominate over finite terms. It is not possible to find a given value that is always large enough. Our alternatives would be to consider the derivative at nextfloat(0.0) or prevfloat(0.0). But this is more or less the same as choosing some large value – in this case an extremely large value that will rapidly overflow.","category":"page"},{"location":"maths/nondiff_points.html#Derivative-on-finite-and-different-on-both-sides","page":"Non-differentiable Points","title":"Derivative on-finite and different on both sides","text":"","category":"section"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"plot(x-> sign(x) * cbrt(x))","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"In this example, the primal is defined and finite, so we would like a derivative to be defined. We are back in the case of a local minimum like we were for abs. We can make most of the same arguments as we made there to justify saying the derivative is zero.","category":"page"},{"location":"maths/nondiff_points.html#Conclusion","page":"Non-differentiable Points","title":"Conclusion","text":"","category":"section"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"From the case studies a few general rules can be seen for how to choose a value that is useful. These rough rules are:","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"Say the derivative is 0 at local optima.\nIf the derivative from one side is defined and the other isn't, say it is the derivative taken from the defined side.\nIf the derivative from one side is finite and the other isn't, say it is the derivative taken from the finite side.\nWhen derivative from each side is not equal, strongly consider reporting the average.","category":"page"},{"location":"maths/nondiff_points.html","page":"Non-differentiable Points","title":"Non-differentiable Points","text":"Our goal as always, is to get a pragmatically useful result for everyone, which must by necessity also avoid a pathological result for anyone.","category":"page"},{"location":"rule_author/superpowers/projectto.html#projectto","page":"ProjectTo","title":"ProjectTo the primal subspace","text":"","category":"section"},{"location":"rule_author/superpowers/projectto.html","page":"ProjectTo","title":"ProjectTo","text":"Rules with abstractly-typed arguments may return incorrect answers when called with certain concrete types. A classic example is the matrix-matrix multiplication rule, a naive definition of which follows:","category":"page"},{"location":"rule_author/superpowers/projectto.html","page":"ProjectTo","title":"ProjectTo","text":"function rrule(::typeof(*), A::AbstractMatrix, B::AbstractMatrix)\n    function times_pullback(ȳ)\n        dA = ȳ * B'\n        dB = A' * ȳ\n        return NoTangent(), dA, dB\n    end\n    return A * B, times_pullback\nend","category":"page"},{"location":"rule_author/superpowers/projectto.html","page":"ProjectTo","title":"ProjectTo","text":"When computing *(A, B), where A isa Diagonal and B isa Matrix, the output will be a Matrix. As a result, ȳ in the pullback will be a Matrix, and consequently dA for a A isa Diagonal will be a Matrix, which is wrong. Not only is it the wrong type, but it can contain non-zeros off the diagonal, which is not possible, it is outside of the subspace. While a specialised rules can indeed be written for the Diagonal case, there are many other types and we don't want to be forced to write a rule for each of them. Instead, project_A = ProjectTo(A) can be used (outside the pullback) to extract an object that knows how to project onto the type of A (e.g. also knows the size of the array). This object can be called with a tangent ȳ * B', by doing project_A(ȳ * B'), to project it on the tangent space of A. The correct rule then looks like","category":"page"},{"location":"rule_author/superpowers/projectto.html","page":"ProjectTo","title":"ProjectTo","text":"function rrule(::typeof(*), A::AbstractMatrix, B::AbstractMatrix)\n    project_A = ProjectTo(A)\n    project_B = ProjectTo(B)\n    function times_pullback(ȳ)\n        dA = ȳ * B'\n        dB = A' * ȳ\n        return NoTangent(), project_A(dA), project_B(dB)\n    end\n    return A * B, times_pullback\nend","category":"page"},{"location":"rule_author/superpowers/projectto.html","page":"ProjectTo","title":"ProjectTo","text":"note: It is often good to `@thunk` your projections\nThe above example is potentially a good place for using a @thunk. This is not required, but can in some cases be more computationally efficient, see Use Thunks appropriately. When combining thunks and projections, @thunk() must be the outermost call.A more optimized implementation of the matrix-matrix multiplication example would havetimes_pullback(ȳ) = NoTangent(), @thunk(project_A(ȳ * B')), @thunk(project_B(A' * ȳ))within the rrule. This defers both the evaluation of the product rule and the projection until(/if) the tangent gets used.","category":"page"},{"location":"maths/propagators.html#The-propagators:-pushforward-and-pullback","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"","category":"section"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"terminology: pushforward and pullback\nPushforward and pullback are fancy words that the autodiff community recently adopted from Differential Geometry. They are broadly in agreement with the use of pullback and pushforward in differential geometry. But any geometer will tell you these are the super-boring flat cases. Some will also frown at you. They are also sometimes described in terms of the jacobian: The pushforward is jacobian vector product (jvp), and pullback is jacobian transpose vector product (j'vp). Other terms that may be used include for pullback the backpropagator, and by analogy for pushforward the forwardpropagator, thus these are the propagators. These are also good names because effectively they propagate wiggles and wobbles through them, via the chain rule. (the term backpropagator may originate with \"Lambda The Ultimate Backpropagator\" by Pearlmutter and Siskind, 2008)","category":"page"},{"location":"maths/propagators.html#Core-Idea","page":"The propagators: pushforward and pullback","title":"Core Idea","text":"","category":"section"},{"location":"maths/propagators.html#Less-formally","page":"The propagators: pushforward and pullback","title":"Less formally","text":"","category":"section"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"The pushforward takes a wiggle in the input space, and tells what wobble you would create in the output space, by passing it through the function.\nThe pullback takes wobbliness information with respect to the function's output, and tells the equivalent wobbliness with respect to the functions input.","category":"page"},{"location":"maths/propagators.html#More-formally","page":"The propagators: pushforward and pullback","title":"More formally","text":"","category":"section"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"The pushforward of f takes the sensitivity of the input of f to a quantity, and gives the sensitivity of the output of f to that quantity.","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"The pullback of f takes the sensitivity of a quantity to the output of f, and gives the sensitivity of that quantity to the input of f.","category":"page"},{"location":"maths/propagators.html#Math","page":"The propagators: pushforward and pullback","title":"Math","text":"","category":"section"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"This is all a bit simplified by talking in 1D.","category":"page"},{"location":"maths/propagators.html#Lighter-Math","page":"The propagators: pushforward and pullback","title":"Lighter Math","text":"","category":"section"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"For a chain of expressions:","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"a = f(x)\nb = g(a)\nc = h(b)","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"The pullback of g, which incorporates the knowledge of ∂b/∂a, applies the chain rule to go from ∂c/∂b to ∂c/∂a.","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"The pushforward of g,  which also incorporates the knowledge of ∂b/∂a, applies the chain rule to go from ∂a/∂x to ∂b/∂x.","category":"page"},{"location":"maths/propagators.html#Geometric-interpretation-of-reverse-and-forwards-mode-AD","page":"The propagators: pushforward and pullback","title":"Geometric interpretation of reverse and forwards mode AD","text":"","category":"section"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"Let us think of our types geometrically. In other words, elements of a type form a manifold. This document will explain this point of view in some detail.","category":"page"},{"location":"maths/propagators.html#Some-terminology/conventions","page":"The propagators: pushforward and pullback","title":"Some terminology/conventions","text":"","category":"section"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"Let p be an element of type M, which is defined by some assignment of numbers x_1 dots x_m, say (x_1 dots x_m) = (a_1 dots a_m)","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"A function fM to K on M is (for simplicity) a polynomial Kx_1 dots x_m","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"The tangent space T_pM of M at point p is the K-vector space spanned by derivations ddx. The tangent space acts linearly on the space of functions. They act as usual on functions. Our starting point is that we know how to write down ddx(f) = dfdx.","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"The collection of tangent spaces T_pM for pin M is called the tangent bundle of M.","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"Let df denote the first order information of f at each point. This is called the differential of f. If the derivatives of f and g agree at p, we say that df and dg represent the same cotangent at p. The covectors dx_1 dots dx_m form the basis of the cotangent space T^*_pM at p. Notice that this vector space is dual to T_pM.","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"The collection of cotangent spaces T^*_pM for pin M is called the cotangent bundle of M.","category":"page"},{"location":"maths/propagators.html#Push-forwards-and-pullbacks","page":"The propagators: pushforward and pullback","title":"Push-forwards and pullbacks","text":"","category":"section"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"Let N be another type, defined by numbers y_1y_n, and let gM to N be a map, that is, an n-dimensional vector (g_1  g_m) of functions on M.","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"We define the push-forward g_*TM to TN between tangent bundles by g_*(X)(h) = X(gcirc h) for any tangent vector X and function f. We have g_*(ddx_i)(y_j) = dg_jdx_i, so the push-forward corresponds to the Jacobian, given a chosen basis.","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"Similarly, the pullback of the differential df is defined by g^*(df) = d(fcirc g). So for a coordinate differential dy_j, we have g^*(dy_j) = d(g_j). Notice that this is a covector, and we could have defined the pullback by its action on vectors by g^*(dh)(X) = g_*(X)(dh) = X(gcirc h) for any function f on N and Xin TM. In particular, g^*(dy_j)(ddx_i) = d(g_j)dx_i. If you work out the action in a basis of the cotangent space, you see that it acts by the adjoint of the Jacobian.","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"Notice that the pullback of a differential and the pushforward of a vector have a very different meaning, and this should be reflected on how they are used in code.","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"The information contained in the push-forward map is exactly what does my function do to tangent vectors. Pullbacks, acting on differentials of functions, act by taking the total derivative of a function. This works in a coordinate invariant way, and works without the notion of a metric. Gradients recall are vectors, yet they should contain the same information of the differential df. Assuming we use the standard euclidean metric, we can identify df and nabla f as vectors. But pulling back gradients still should not be a thing.","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"If the goal is to evaluate the gradient of a function f=gcirc hM to N to K, where g is a map and h is a function, we have two obvious options: First, we may push-forward a basis of M to TK which we identify with K itself. This results in m scalars, representing components of the gradient. Step-by-step in coordinates:","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"Compute the push-forward of the basis of T_pM, i.e. just the columns of the Jacobian dg_idx_j.\nCompute the push-forward of the function h (consider it as a map, K is also a manifold!) to get h_*(g_*T_pM) = sum_j dhdy_i (dg_idx_j)","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"Second, we pull back the differential dh:","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"compute dh = dhdy_1dhdy_n in coordinates.\npull back by (in coordinates) multiplying with the adjoint of the Jacobian, resulting in g_*(dh) = sum_i(dg_idx_j)(dhdy_i).","category":"page"},{"location":"maths/propagators.html#The-anatomy-of-pullback-and-pushforward","page":"The propagators: pushforward and pullback","title":"The anatomy of pullback and pushforward","text":"","category":"section"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"For our function foo(args...; kwargs...) = y:","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"function pullback(Δy)\n    ...\n    return ∂self, ∂args...\nend","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"The input to the pullback is often called the seed. If the function is y = f(x) often the pullback will be written s̄elf, x̄ = pullback(ȳ).","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"note: Note\nThe pullback returns one ∂arg per arg to the original function, plus one ∂self for the fields of the function itself (explained below).","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"terminology: perturbation, seed, sensitivity\nSometimes perturbation, seed, and even sensitivity will be used interchangeably. They are not generally synonymous, and ChainRules shouldn't mix them up. One must be careful when reading literature. At the end of the day, they are all wiggles or wobbles.","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"The pushforward is a part of the frule function. Considered alone it would look like:","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"function pushforward(Δself, Δargs...)\n    ...\n    return ∂y\nend","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"But because it is fused into frule we see it as part of:","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"function frule((Δself, Δargs...), ::typeof(foo), args...; kwargs...)\n    ...\n    return y, ∂y\nend","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"The input to the pushforward is often called the perturbation. If the function is y = f(x) often the pushforward will be written ẏ = last(frule((ṡelf, ẋ), f, x)). ẏ is commonly used to represent the perturbation for y.","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"note: Note\nIn the frule/pushforward, there is one Δarg per arg to the original function. The Δargs are similar in type/structure to the corresponding inputs args (Δself is explained below). The ∂y are similar in type/structure to the original function's output Y. In particular if that function returned a tuple then ∂y will be a tuple of the same size.","category":"page"},{"location":"maths/propagators.html#self_derivative","page":"The propagators: pushforward and pullback","title":"Self derivative Δself, ∂self, s̄elf, ṡelf etc","text":"","category":"section"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"terminology: Δself, ∂self, s̄elf, ṡelf\nIt is the derivatives with respect to the internal fields of the function. To the best of our knowledge there is no standard terminology for this. Other good names might be Δinternal/∂internal.","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"From the mathematical perspective, one may have been wondering what all this Δself, ∂self is. Given that a function with two inputs, say f(a, b), only has two partial derivatives: dfracfa, dfracfb. Why then does a pushforward take in this extra Δself, and why does a pullback return this extra ∂self?","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"The reason is that in Julia the function f may itself have internal fields. For example a closure has the fields it closes over; a callable object (i.e. a functor) like a Flux.Dense has the fields of that object.","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"Thus every function is treated as having the extra implicit argument self, which captures those fields. So every pushforward takes in an extra argument, which is ignored unless the original function has fields. It is common to write function foo_pushforward(_, Δargs...) in the case when foo does not have fields. Similarly every pullback returns an extra ∂self, which for things without fields is NoTangent(), indicating there are no fields within the function itself.","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"Here's an example showing how to define ∂self in an rrule when the primal function has internal fields (implicit arguments):","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"struct Multiplier{T}\n    x::T\nend\n(m::Multiplier)(y) = m.x * y\n\nfunction ChainRulesCore.rrule(m::Multiplier, y)\n    product = m(y)\n    function pullback(Δproduct) \n        ∂self = Tangent{Multiplier}(; x = Δproduct * y')\n        ∂y = m.x' * Δproduct\n        return ∂self, ∂y\n    end \n    return product, pullback\nend","category":"page"},{"location":"maths/propagators.html#Pushforward-/-Pullback-summary","page":"The propagators: pushforward and pullback","title":"Pushforward / Pullback summary","text":"","category":"section"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"Pullback\nreturned by rrule\ntakes output space wobbles, gives input space wiggles\nArgument structure matches structure of primal function output\nIf primal function returns a tuple, then pullback takes in a tuple of differentials.\n1 return per original function argument + 1 for the function itself\nPushforward:\npart of frule\ntakes input space wiggles, gives output space wobbles\nArgument structure matches primal function argument structure, but passed as a tuple at start of frule\n1 argument per original function argument + 1 for the function itself\n1 return per original function return","category":"page"},{"location":"maths/propagators.html#Pullback/Pushforward-and-Directional-Derivative/Gradient","page":"The propagators: pushforward and pullback","title":"Pullback/Pushforward and Directional Derivative/Gradient","text":"","category":"section"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"The most trivial use of the pushforward from within frule is to calculate the directional derivative:","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"If we would like to know the directional derivative of f for an input change of (1.5, 0.4, -1)","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"direction = (1.5, 0.4, -1) # (ȧ, ḃ, ċ)\ny, ẏ = frule((ZeroTangent(), direction...), f, a, b, c)","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"On the basis directions one gets the partial derivatives of y:","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"y, ∂y_∂a = frule((ZeroTangent(), 1, 0, 0), f, a, b, c)\ny, ∂y_∂b = frule((ZeroTangent(), 0, 1, 0), f, a, b, c)\ny, ∂y_∂c = frule((ZeroTangent(), 0, 0, 1), f, a, b, c)","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"Similarly, the most trivial use of rrule and returned pullback is to calculate the gradient:","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"y, f_pullback = rrule(f, a, b, c)\n∇f = f_pullback(1)  # for appropriate `1`-like seed.\ns̄elf, ā, b̄, c̄ = ∇f","category":"page"},{"location":"maths/propagators.html","page":"The propagators: pushforward and pullback","title":"The propagators: pushforward and pullback","text":"Then we have that ∇f is the gradient of f at (a, b, c). And we thus have the partial derivatives overlinemathrmself = dfracfmathrmself, overlinea = dfracfa, overlineb = dfracfb, overlinec = dfracfc, including the self-partial derivative, overlinemathrmself.","category":"page"},{"location":"rule_author/intro.html#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"rule_author/intro.html","page":"Introduction","title":"Introduction","text":"This section of the docs will tell you everything you need to know about writing rules for your package.","category":"page"},{"location":"rule_author/intro.html","page":"Introduction","title":"Introduction","text":"It will help with understanding tangent types, the anatomy of the frule and the rrule, and provide tips on writing good rules, as well as how to test them easily using finite differences.","category":"page"},{"location":"rule_author/intro.html","page":"Introduction","title":"Introduction","text":"This section also outlines some ChainRules superpowers that can be considered advanced usage. Most users can ignore these. However:","category":"page"},{"location":"rule_author/intro.html","page":"Introduction","title":"Introduction","text":"If you are writing rules with abstractly typed arguments, read about ProjectTo.\nIf you want to opt out of using the abstractly typed rule for certain argument types, read about @opt_out.\nIf you are writing rules for higher order functions, read about calling back into AD.\nIf you want to accumulate gradients in-place to avoid extra allocations, read about gradient accumulation.","category":"page"},{"location":"rule_author/rule_definition_tools.html#ruletools","page":"Rule definition tools","title":"Using rule definition tools","text":"","category":"section"},{"location":"rule_author/rule_definition_tools.html","page":"Rule definition tools","title":"Rule definition tools","text":"Rule definition tools can help you write more frules and the rrules with less lines of code.","category":"page"},{"location":"rule_author/rule_definition_tools.html#[@non_differentiable](@ref)","page":"Rule definition tools","title":"@non_differentiable","text":"","category":"section"},{"location":"rule_author/rule_definition_tools.html","page":"Rule definition tools","title":"Rule definition tools","text":"For non-differentiable functions the @non_differentiable macro can be used. For example, instead of manually defining the frule and the rrule for string concatenation *(String..), the macro call","category":"page"},{"location":"rule_author/rule_definition_tools.html","page":"Rule definition tools","title":"Rule definition tools","text":"@non_differentiable *(String...)","category":"page"},{"location":"rule_author/rule_definition_tools.html","page":"Rule definition tools","title":"Rule definition tools","text":"defines the following frule and rrule automatically","category":"page"},{"location":"rule_author/rule_definition_tools.html","page":"Rule definition tools","title":"Rule definition tools","text":"function ChainRulesCore.frule(var\"##_#1600\", ::Core.Typeof(*), String::Any...; kwargs...)\n    return (*(String...; kwargs...), NoTangent())\nend\nfunction ChainRulesCore.rrule(::Core.Typeof(*), String::Any...; kwargs...)\n    return (*(String...; kwargs...), function var\"*_pullback\"(_)\n        (ZeroTangent(), ntuple((_->NoTangent()), 0 + length(String))...)\n    end)\nend","category":"page"},{"location":"rule_author/rule_definition_tools.html","page":"Rule definition tools","title":"Rule definition tools","text":"Note that the types of arguments are propagated to the frule and rrule definitions. This is needed in case the function differentiable for some but not for other types of arguments. For example *(1, 2, 3) is differentiable, and is not defined with the macro call above.","category":"page"},{"location":"rule_author/rule_definition_tools.html#[@scalar_rule](@ref)","page":"Rule definition tools","title":"@scalar_rule","text":"","category":"section"},{"location":"rule_author/rule_definition_tools.html","page":"Rule definition tools","title":"Rule definition tools","text":"For functions involving only scalars, i.e. subtypes of Number (no structs, Strings...), both the frule and the rrule can be defined using a single @scalar_rule macro call.","category":"page"},{"location":"rule_author/rule_definition_tools.html","page":"Rule definition tools","title":"Rule definition tools","text":"Note that the function does not have to be mathbbR rightarrow mathbbR. In fact, any number of scalar arguments is supported, as is returning a tuple of scalars.","category":"page"},{"location":"rule_author/rule_definition_tools.html","page":"Rule definition tools","title":"Rule definition tools","text":"See docstrings for the comprehensive usage instructions.","category":"page"},{"location":"ad_author/call_back_into_ad.html#Declaring-support-for-calling-back-into-ADs","page":"Support calling back into ADs","title":"Declaring support for calling back into ADs","text":"","category":"section"},{"location":"ad_author/call_back_into_ad.html","page":"Support calling back into ADs","title":"Support calling back into ADs","text":"To declare support or lack of support for forward and reverse-mode, use the two pairs of complementary types. For reverse mode: HasReverseMode, NoReverseMode. For forwards mode: HasForwardsMode, NoForwardsMode. AD systems that support any calling back into AD should have one from each set.","category":"page"},{"location":"ad_author/call_back_into_ad.html","page":"Support calling back into ADs","title":"Support calling back into ADs","text":"If an AD HasReverseMode, then it must define rrule_via_ad for that RuleConfig subtype. Similarly, if an AD HasForwardsMode then it must define frule_via_ad for that RuleConfig subtype.","category":"page"},{"location":"ad_author/call_back_into_ad.html","page":"Support calling back into ADs","title":"Support calling back into ADs","text":"For example:","category":"page"},{"location":"ad_author/call_back_into_ad.html","page":"Support calling back into ADs","title":"Support calling back into ADs","text":"struct MyReverseOnlyADRuleConfig <: RuleConfig{Union{HasReverseMode, NoForwardsMode}} end\n\nfunction ChainRulesCore.rrule_via_ad(::MyReverseOnlyADRuleConfig, f, args...)\n    ...\n    return y, pullback\nend","category":"page"},{"location":"ad_author/call_back_into_ad.html","page":"Support calling back into ADs","title":"Support calling back into ADs","text":"Note that it is not actually required that the same AD is used for forward and reverse. For example Nabla.jl is a reverse mode AD. It might declare that it HasForwardsMode, and then define a wrapper around ForwardDiff.jl in order to provide that capacity.","category":"page"},{"location":"rule_author/converting_zygoterules.html#Converting-ZygoteRules.@adjoint-to-rrules","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"","category":"section"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"ZygoteRules.jl is a legacy package similar to ChainRulesCore but supporting Zygote.jl only.","category":"page"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"If you have some rules written with ZygoteRules it is a good idea to upgrade them to use ChainRules instead. Zygote will still be able to use them, but so will other AD systems, and you will get access to some more advanced features. Some of these features are currently ignored by Zygote, but could be supported in the future.","category":"page"},{"location":"rule_author/converting_zygoterules.html#Example","page":"Converting ZygoteRules.@adjoint to rrules","title":"Example","text":"","category":"section"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"Consider the function","category":"page"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"struct Foo\n    a::Float64,\n    b::Float64\nend\n\nf(x, y::Foo, z) = 2*x + y.a","category":"page"},{"location":"rule_author/converting_zygoterules.html#ZygoteRules","page":"Converting ZygoteRules.@adjoint to rrules","title":"ZygoteRules","text":"","category":"section"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"@adjoint function f(x, y::Foo, z)\n    f_pullback(Ω̄) = (2Ω̄, NamedTuple(;a=Ω̄, b=nothing), nothing)\n    return f(x, y, z), f_pullback\nend","category":"page"},{"location":"rule_author/converting_zygoterules.html#ChainRules","page":"Converting ZygoteRules.@adjoint to rrules","title":"ChainRules","text":"","category":"section"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"function rrule(::typeof(f), x, y::Foo, z)\n    f_pullback(Ω̄) = (NoTangent(), 2Ω̄, Tangent{Foo}(;a=Ω̄), ZeroTangent())\n    return f(x, y, z), f_pullback\nend","category":"page"},{"location":"rule_author/converting_zygoterules.html#Write-as-a-rrule(::typeof(f),-...)","page":"Converting ZygoteRules.@adjoint to rrules","title":"Write as a rrule(::typeof(f), ...)","text":"","category":"section"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"No magic macro here, rrule is the function that it is. The function it is the rule for is the first argument, or second argument if you need to take a RuleConfig.","category":"page"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"Note that when writing the rule for constructor you will need to use ::Type{Foo}, not typeof(Foo). See docs on Constructors.","category":"page"},{"location":"rule_author/converting_zygoterules.html#Include-the-derivative-with-respect-to-the-function-object-itself","page":"Converting ZygoteRules.@adjoint to rrules","title":"Include the derivative with respect to the function object itself","text":"","category":"section"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"The ZygoteRules.@adjoint macro automagically[1] inserts an extra nothing in the return for the function it generates to represent the derivative of output with respect to the function object. ChainRules as a philosophy avoids magic as much as possible, and thus require you to return it explicitly. If it is a plain function (like typeof(sin)), then the tangent will be NoTangent.","category":"page"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"[1]: unless you write it in functor form (i.e. @adjoint (f::MyType)(args...)=...), in that case like for rrule you need to include it explicitly.","category":"page"},{"location":"rule_author/converting_zygoterules.html#Tangent-Type-changes","page":"Converting ZygoteRules.@adjoint to rrules","title":"Tangent Type changes","text":"","category":"section"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"ChainRules uses tangent types that must represent vector spaces (i.e. tangent spaces). They need to have things like + defined on them. ZygoteRules takes a more adhoc approach to this.","category":"page"},{"location":"rule_author/converting_zygoterules.html#nothing-becomes-an-AbstractZero","page":"Converting ZygoteRules.@adjoint to rrules","title":"nothing becomes an AbstractZero","text":"","category":"section"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"ZygoteRules uses nothing to represent some sense of zero, in a primal type agnostic way. There are many senses of zero. ChainRules represents two of them, as subtypes of AbstractZero.","category":"page"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"ZeroTangent for the case that there is no relationship between the primal output and the primal input. NoTangent for the case where conceptually the tangent space doesn't exist. e.g. what is the Tangent to a String or an index: those can't be perturbed.","category":"page"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"See FAQ on the difference between ZeroTangent and NoTangent. At the end of the day it doesn't matter too much if you get them wrong. NoTangent and ZeroTangent more or less act identically.","category":"page"},{"location":"rule_author/converting_zygoterules.html#Tuples-and-NamedTuples-become-Tangent{T}s","page":"Converting ZygoteRules.@adjoint to rrules","title":"Tuples and NamedTuples become Tangent{T}s","text":"","category":"section"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"Zygote uses Tuples and NamedTuples to represent the structural tangents for Tuples and structs respectively. ChainRules core provides a generic Tangent{T} to represent the structural tangent of a primal type T. It takes positional arguments if representing tangent for a Tuple. Or keyword argument to represent the tangent for a struct or a NamedTuple. When representing a struct you only need to list the nonzero fields – any not given are implicit considered to be ZeroTangent.","category":"page"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"When we say structural tangent we mean tangent types that are based only on the structure of the primal. This is in contrast to a natural tangent which captures some knowledge based on what the primal type represents. (E.g. for arrays a natural tangent is often the same kind of array). For more details see the the design docs on the many tangent types","category":"page"},{"location":"rule_author/converting_zygoterules.html#Calling-back-into-AD-(ZygoteRules.pullback)","page":"Converting ZygoteRules.@adjoint to rrules","title":"Calling back into AD (ZygoteRules.pullback)","text":"","category":"section"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"Rules that need to call back into the AD system, e.g, for higher order functions like map(f, xs), need to be changed. In ZygoteRules you can use ZygoteRules.pullback or ZygoteRules._pullback, which will always result in calling into Zygote. Since ChainRules is AD agnostic, you can't do that. Instead you use a RuleConfig to specify requirements of an AD system e.g ::RuleConfig{>:HasReverseMode} work for Zygote, and then use rrule_via_ad.","category":"page"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"See the docs on calling back into AD for more details.","category":"page"},{"location":"rule_author/converting_zygoterules.html#Consider-adding-some-thunks","page":"Converting ZygoteRules.@adjoint to rrules","title":"Consider adding some thunks","text":"","category":"section"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"A feature ChainRulesCore offers that ZygoteRules doesn't is support for thunks. Thunks delay work until it is needed, and avoid it if it never is. See docs on @thunk, Thunk, InplaceableThunk.","category":"page"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"You don't have to use thunks, though. It is easy to go overboard with using thunks.","category":"page"},{"location":"rule_author/converting_zygoterules.html#Testing-Changes","page":"Converting ZygoteRules.@adjoint to rrules","title":"Testing Changes","text":"","category":"section"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"One of the advantages of using ChainRules is that you can easily and robustly test your rules with ChainRulesTestUtils.jl. This uses finite differencing to test the accuracy of derivative, as well as checks the correctness of the API. It should catch anything you might have gotten wrong referred to in this page.","category":"page"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"The test for the above example is test_rrule(f, 2.5, Foo(9.9, 7.2), 31.0). You can see it looks a lot like an example call to rrule, just with the prefix test_ added to the start.","category":"page"},{"location":"rule_author/converting_zygoterules.html#@nograd-becomes-@non_differentiable","page":"Converting ZygoteRules.@adjoint to rrules","title":"@nograd becomes @non_differentiable","text":"","category":"section"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"Probably more or less with no changes. @non_differentiable also lets you specify a signature in case you want to restrict non-differentiability to a certain subset of argument types.","category":"page"},{"location":"rule_author/converting_zygoterules.html#No-such-thing-as-literal_getproperty","page":"Converting ZygoteRules.@adjoint to rrules","title":"No such thing as literal_getproperty","text":"","category":"section"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"That is just getproperty, it takes Symbol. It should constant-fold. It likely doesn't though as Zygote doesn't play nice with the optimizer.","category":"page"},{"location":"rule_author/converting_zygoterules.html#Take-embedded-spaces-and-types-seriously","page":"Converting ZygoteRules.@adjoint to rrules","title":"Take embedded spaces and types seriously","text":"","category":"section"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"Traditionally Zygote has taken a very laissez-faire attitude towards types and mathematical spaces. Sometimes treating Reals as embedded in the Complex plane; sometimes not. Sometimes treating sparse and structuredly-sparse matrix as embedded in the space of dense matrices. Writing rules that apply to any Array{T} which perhaps are only applicable for Array{<:Real} and not so much for Array{Quaternion}. Traditionally ChainRules takes a much more considered approach.","category":"page"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"See for example our docs on how to handle complex numbers correctly. (The outcome of several long long long discussions with a number of experts in our community)","category":"page"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"Now, I am not here to tell you what to do in your package, but this is a good time to reconsider how seriously you take these things in the rules you are converting.","category":"page"},{"location":"rule_author/converting_zygoterules.html#What-if-I-miss-something","page":"Converting ZygoteRules.@adjoint to rrules","title":"What if I miss something","text":"","category":"section"},{"location":"rule_author/converting_zygoterules.html","page":"Converting ZygoteRules.@adjoint to rrules","title":"Converting ZygoteRules.@adjoint to rrules","text":"It is not great, but it probably OK. Zygote's ChainRules interface is fairly forgiving. Other AD systems may not be. If you test with ChainRulesTestUtils.jl then you can be confident that you didn't miss anything.","category":"page"},{"location":"rule_author/example.html#Pedagogical-Example","page":"Pedagogical example","title":"Pedagogical Example","text":"","category":"section"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"This pedagogical example will show you how to write an rrule. See On writing good rrule / frule methods section for more tips and gotchas. If you want to learn about frules, you should still read and understand this example as many concepts are shared, and then look for real world frule examples in ChainRules.jl.","category":"page"},{"location":"rule_author/example.html#The-primal","page":"Pedagogical example","title":"The primal","text":"","category":"section"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"We define a struct Foo","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"struct Foo{T}\n    A::Matrix{T}\n    c::Float64\nend","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"and a function that multiplies Foo with an AbstractArray:","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"function foo_mul(foo::Foo, b::AbstractArray)\n    return foo.A * b\nend","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"Note that field c is ignored in the calculation.","category":"page"},{"location":"rule_author/example.html#The-rrule","page":"Pedagogical example","title":"The rrule","text":"","category":"section"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"The rrule method for our primal computation should extend the ChainRulesCore.rrule function.","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"function ChainRulesCore.rrule(::typeof(foo_mul), foo::Foo{T}, b::AbstractArray) where T\n    y = foo_mul(foo, b)\n    function foo_mul_pullback(ȳ)\n        f̄ = NoTangent()\n        f̄oo = Tangent{Foo{T}}(; A=ȳ * b', c=ZeroTangent())\n        b̄ = @thunk(foo.A' * ȳ)\n        return f̄, f̄oo, b̄\n    end\n    return y, foo_mul_pullback\nend","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"We can check this rule against a finite-differences approach using ChainRulesTestUtils:","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"julia> using ChainRulesTestUtils\n\njulia> test_rrule(foo_mul, Foo(rand(3, 3), 3.0), rand(3, 3))\nTest Summary:                                       | Pass  Total\ntest_rrule: foo_mul on Foo{Float64},Matrix{Float64} |   10     10\nTest.DefaultTestSet(\"test_rrule: foo_mul on Foo{Float64},Matrix{Float64}\", Any[], 10, false, false)","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"Now let's examine the rule in more detail:","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"function ChainRulesCore.rrule(::typeof(foo_mul), foo::Foo, b::AbstractArray)\n    ...\n    return y, foo_mul_pullback\nend","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"The rrule dispatches on the typeof of the function we are writing the rrule for, as well as the types of its arguments. Read more about writing rules for constructors and callable objects here. The rrule returns the primal result y, and the pullback function. It is a very good idea to name your pullback function, so that they are helpful when appearing in the stacktrace.","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"y = foo_mul(foo, b)","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"Computes the primal result. It is possible to change the primal computation so that work can be shared between the primal and the pullback. See e.g. the rule for sort, where the sorting is done only once.","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"function foo_mul_pullback(ȳ)\n    ...\n    return f̄, f̄oo, b̄\nend","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"The pullback function takes in the tangent of the primal output (ȳ) and returns the tangents of the primal inputs. Note that it returns a tangent for the primal function in addition to the tangents of primal arguments.","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"Finally, computing the tangents of primal inputs:","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"f̄ = NoTangent()","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"The function foo_mul has no fields (i.e. it is not a closure) and can not be perturbed. Therefore its tangent (f̄) is a NoTangent.","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"f̄oo = Tangent{Foo}(; A=ȳ * b', c=ZeroTangent())","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"The struct foo::Foo gets a Tangent{Foo} structural tangent, which stores the tangents of fields of foo.","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"The tangent of the field A is ȳ * b',","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"The tangent of the field c is ZeroTangent(), because c can be perturbed but has no effect on the primal output.","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"b̄ = @thunk(foo.A' * ȳ)","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"The tangent of b is foo.A' * ȳ, but we have wrapped it into a Thunk, a tangent type that represents delayed computation. The idea is that in case the tangent is not used anywhere, the computation never happens. Use InplaceableThunk if you are interested in accumulating gradients in-place. Note that in practice one would also @thunk the f̄oo.A tangent, but it was omitted in this example for clarity.","category":"page"},{"location":"rule_author/example.html","page":"Pedagogical example","title":"Pedagogical example","text":"As a final note, since b is an AbstractArray, its tangent b̄ should be projected to the right subspace. See the ProjectTo the primal subspace section for more information and an example that motivates the projection operation.","category":"page"},{"location":"ad_author/use_in_ad_system.html#Using-ChainRules-in-your-AD-system","page":"Usage in AD","title":"Using ChainRules in your AD system","text":"","category":"section"},{"location":"ad_author/use_in_ad_system.html","page":"Usage in AD","title":"Usage in AD","text":"This section is for authors of AD systems. It assumes a pretty solid understanding of both Julia and automatic differentiation. It explains how to make use of ChainRule's \"rulesets\" (frules, rrules,) to avoid having to code all your own AD primitives / custom sensitives.","category":"page"},{"location":"ad_author/use_in_ad_system.html","page":"Usage in AD","title":"Usage in AD","text":"There are 3 main ways to access ChainRules rule sets in your AutoDiff system.","category":"page"},{"location":"ad_author/use_in_ad_system.html","page":"Usage in AD","title":"Usage in AD","text":"Operator Overloading Generation\nUse ChainRulesOverloadGeneration.jl.\nThis is primarily intended for operator overloading based AD systems which will generate overloads for primal functions based for their overloaded types based on the existence of an rrule/frule.\nA source code generation based AD can also use this by overloading their transform generating function directly so as not to recursively generate a transform but to just return the rule.\nThis does not play nice with Revise.jl, adding or modifying rules in loaded files will not be reflected until a manual refresh, and deleting rules will not be reflected at all.\nSource code transform based on inserting branches that check of rrule/frule return nothing\nIf the rrule/frule returns a rule result then use it, if it returns nothing then do normal AD path.\nIn theory type inference optimizes these branches out; in practice it may not.\nThis is a fairly simple Cassette overdub (or similar) of all calls, and is suitable for overloading based AD or source code transformation.\nSource code transform based on rrule/frule method-table\nIf an applicable rrule/frule exists in the method table then use it, else generate normal AD path.\nThis avoids having branches in your generated code.\nThis requires maintaining your own back-edges.\nThis is pretty hardcore even by the standard of source code transformations.","category":"page"},{"location":"maths/complex.html#complexfunctions","page":"Complex numbers","title":"How do chain rules work for complex functions?","text":"","category":"section"},{"location":"maths/complex.html","page":"Complex numbers","title":"Complex numbers","text":"ChainRules follows the convention that frule applied to a function f(x + i y) = u(xy) + i v(xy) with perturbation Delta x + i Delta y returns the value and","category":"page"},{"location":"maths/complex.html","page":"Complex numbers","title":"Complex numbers","text":"tfracpartial upartial x  Delta x + tfracpartial upartial y  Delta y + i  Bigl( tfracpartial vpartial x  Delta x + tfracpartial vpartial y  Delta y Bigr)\n","category":"page"},{"location":"maths/complex.html","page":"Complex numbers","title":"Complex numbers","text":"Similarly, rrule applied to the same function returns the value and a pullback function which, when applied to the adjoint Delta u + i Delta v, returns","category":"page"},{"location":"maths/complex.html","page":"Complex numbers","title":"Complex numbers","text":"Delta u  tfracpartial upartial x + Delta v  tfracpartial vpartial x + i  Bigl(Delta u  tfracpartial u partial y + Delta v  tfracpartial vpartial y Bigr)\n","category":"page"},{"location":"maths/complex.html","page":"Complex numbers","title":"Complex numbers","text":"If we interpret complex numbers as vectors in mathbbR^2, then frule (rrule) corresponds to multiplication with the (transposed) Jacobian of f(z), i.e. frule corresponds to","category":"page"},{"location":"maths/complex.html","page":"Complex numbers","title":"Complex numbers","text":"beginpmatrix\ntfracpartial upartial x  Delta x + tfracpartial upartial y  Delta y\n\ntfracpartial vpartial x  Delta x + tfracpartial vpartial y  Delta y\nendpmatrix\n=\nbeginpmatrix\ntfracpartial upartial x  tfracpartial upartial y \ntfracpartial vpartial x  tfracpartial vpartial y \nendpmatrix\nbeginpmatrix\nDelta x  Delta y\nendpmatrix\n","category":"page"},{"location":"maths/complex.html","page":"Complex numbers","title":"Complex numbers","text":"and rrule corresponds to","category":"page"},{"location":"maths/complex.html","page":"Complex numbers","title":"Complex numbers","text":"beginpmatrix\ntfracpartial upartial x  Delta u + tfracpartial vpartial x  Delta v\n\ntfracpartial upartial y  Delta u + tfracpartial vpartial y  Delta v\nendpmatrix\n=\nbeginpmatrix\ntfracpartial upartial x  tfracpartial upartial y \ntfracpartial vpartial x  tfracpartial vpartial y \nendpmatrix^mathsfT\nbeginpmatrix\nDelta u  Delta v\nendpmatrix\n","category":"page"},{"location":"maths/complex.html","page":"Complex numbers","title":"Complex numbers","text":"The Jacobian of fmathbbC to mathbbC interpreted as a function mathbbR^2 to mathbbR^2 can hence be evaluated using either of the following functions.","category":"page"},{"location":"maths/complex.html","page":"Complex numbers","title":"Complex numbers","text":"function jacobian_via_frule(f,z)\n    du_dx, dv_dx = reim(frule((ZeroTangent(), 1),f,z)[2])\n    du_dy, dv_dy = reim(frule((ZeroTangent(),im),f,z)[2])\n    return [\n        du_dx  du_dy\n        dv_dx  dv_dy\n    ]\nend","category":"page"},{"location":"maths/complex.html","page":"Complex numbers","title":"Complex numbers","text":"function jacobian_via_rrule(f,z)\n    _, pullback = rrule(f,z)\n    du_dx, du_dy = reim(pullback( 1)[2])\n    dv_dx, dv_dy = reim(pullback(im)[2])\n    return [\n        du_dx  du_dy\n        dv_dx  dv_dy\n    ]\nend","category":"page"},{"location":"maths/complex.html","page":"Complex numbers","title":"Complex numbers","text":"If f(z) is holomorphic, then the derivative part of frule can be implemented as f(z)  Delta z and the derivative part of rrule can be implemented as bigl(f(z)bigr)^*  Delta f, where cdot^* is the complex conjugate. Consequently, holomorphic derivatives can be evaluated using either of the following functions.","category":"page"},{"location":"maths/complex.html","page":"Complex numbers","title":"Complex numbers","text":"function holomorphic_derivative_via_frule(f,z)\n    fz,df_dz = frule((ZeroTangent(),1),f,z)\n    return df_dz\nend","category":"page"},{"location":"maths/complex.html","page":"Complex numbers","title":"Complex numbers","text":"function holomorphic_derivative_via_rrule(f,z)\n    fz, pullback = rrule(f,z)\n    dself, conj_df_dz = pullback(1)\n    return conj(conj_df_dz)\nend","category":"page"},{"location":"maths/complex.html","page":"Complex numbers","title":"Complex numbers","text":"note: Note\nThere are various notions of complex derivatives (holomorphic and Wirtinger derivatives, Jacobians, gradients, etc.) which differ in subtle but important ways. The goal of ChainRules is to provide the basic differentiation rules upon which these derivatives can be implemented, but it does not implement these derivatives itself. It is recommended that you carefully check how the above definitions of frule and rrule translate into your specific notion of complex derivative, since getting this wrong will quietly give you wrong results.","category":"page"},{"location":"rule_author/tangents.html#tangents","page":"Tangent types","title":"Tangent types","text":"","category":"section"},{"location":"rule_author/tangents.html","page":"Tangent types","title":"Tangent types","text":"The values that come back from pullbacks or pushforwards are not always the same type as the input/outputs of the primal function. They are tangents, which correspond roughly to something able to represent the difference between two values of the primal types. A tangent might be such a regular type, like a Number, or a Matrix, matching to the original type; or it might be one of the AbstractTangent subtypes.","category":"page"},{"location":"rule_author/tangents.html","page":"Tangent types","title":"Tangent types","text":"Tangents support a number of operations. Most importantly: + and *, which let them act as mathematical objects.","category":"page"},{"location":"rule_author/tangents.html","page":"Tangent types","title":"Tangent types","text":"To be more formal they support operations which let them act as a vector space.","category":"page"},{"location":"rule_author/tangents.html#Operations-on-a-tangent-type","page":"Tangent types","title":"Operations on a tangent type","text":"","category":"section"},{"location":"rule_author/tangents.html","page":"Tangent types","title":"Tangent types","text":"Any tangent type must support:","category":"page"},{"location":"rule_author/tangents.html","page":"Tangent types","title":"Tangent types","text":"zero which returns an additive identity for that type (though it can just return ZeroTangent() (see below))\n+ for addition between two tangents of this primal, returning another tangent of this primal. This allows gradient accumulation.\n* for multiplication (scaling) by a scalar.\n+ between a tangent and its primal type returning another tangent of the primal type – differential geometers sometimes call this exponential map.","category":"page"},{"location":"rule_author/tangents.html","page":"Tangent types","title":"Tangent types","text":"Further they often support other linear operators for convenience in writing rules. ","category":"page"},{"location":"rule_author/tangents.html#The-subtypes-of-AbstractTangent","page":"Tangent types","title":"The subtypes of AbstractTangent","text":"","category":"section"},{"location":"rule_author/tangents.html","page":"Tangent types","title":"Tangent types","text":"Not all tangents need to subtype the AbstractTangent type – in fact most don't: most are just numbers or arrays – but ChainRulesCore does provide a number of special tangent types that can be very useful. ","category":"page"},{"location":"rule_author/tangents.html","page":"Tangent types","title":"Tangent types","text":"ZeroTangent: It is a special representation of 0. It does great things around avoiding expanding Thunks in addition.\nNoTangent: Zero-like, represents that the operation on this input is not differentiable. Its primal type is normally Integer or Bool.\nTangent{P}: this is the tangent for tuples and  structs. Use it like a Tuple or NamedTuple. The type parameter P is for the primal type.\nThunk: this is a deferred computation. A thunk is a word for a zero argument closure. A computation wrapped in a @thunk doesn't get evaluated until unthunk is called on the thunk. unthunk is a no-op on non-thunked inputs.\nInplaceableThunk: it is like a Thunk but it can do in-place add! which allows for avoiding allocation during gradient accumulation.","category":"page"},{"location":"maths/arrays.html#Deriving-Array-Rules","page":"Deriving array rules","title":"Deriving Array Rules","text":"","category":"section"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"One of the goals of the ChainRules interface is to make it easy to define your own rules for a function. This tutorial attempts to demystify deriving and implementing custom rules for arrays with real and complex entries, with examples. The approach we use is similar to the one succinctly explained and demonstrated in [Giles2008] and its extended work [Giles2008ext], but we generalize it to support functions of multidimensional arrays with both real and complex entries.","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Throughout this tutorial, we will use the following type alias:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"const RealOrComplex = Union{Real,Complex}","category":"page"},{"location":"maths/arrays.html#Forward-mode-rules","page":"Deriving array rules","title":"Forward-mode rules","text":"","category":"section"},{"location":"maths/arrays.html#Approach","page":"Deriving array rules","title":"Approach","text":"","category":"section"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Consider a function","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Ω = f(X::Array{<:RealOrComplex}...)::Array{<:RealOrComplex}","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"or in math notation","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"f (ldots X_m ldots) mapsto Omega","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"where the components of X_m are written as (X_m)_ildotsj. The variables X_m and Omega are intermediates in a larger program (function) that, by considering only a single real input t and real output s can always be written as","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"t mapsto (ldots X_m ldots) mapsto Omega mapsto s","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"where t and s are real numbers. If we know the partial derivatives of X_m with respect to t, fracdX_mdt = dotX_m, the chain rule gives the pushforward of f as:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginequation labelpf\ndotOmega\n    = f_*(ldots dotX_m ldots)\n    = sum_m sum_i ldots j\n        fracpartial Omega partial (X_m)_ildotsj  (dotX_m)_ildotsj\nendequation","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"That's ugly, but in practice we can often write it more simply by using forward mode rules for simpler functions, as we'll see below. The forward-mode rules for arrays follow directly from the usual scalar chain rules.","category":"page"},{"location":"maths/arrays.html#Array-addition","page":"Deriving array rules","title":"Array addition","text":"","category":"section"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Ω = A + B","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"This one is easy:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Omega = A + B","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"dotOmega = dotA + dotB","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"We can implement the frule in ChainRules's notation:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"function frule(\n    (_, ΔA, ΔB),\n    ::typeof(+),\n    A::Array{<:RealOrComplex},\n    B::Array{<:RealOrComplex},\n)\n    Ω = A + B\n    ∂Ω = ΔA + ΔB\n    return (Ω, ∂Ω)\nend","category":"page"},{"location":"maths/arrays.html#Matrix-multiplication","page":"Deriving array rules","title":"Matrix multiplication","text":"","category":"section"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Ω = A * B","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Omega = A B","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"First we write in component form:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Omega_ij = sum_k A_ik B_kj","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Then we use the product rule to get the pushforward for each scalar entry:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginalign*\ndotOmega_ij\n    = sum_k left( dotA_ik B_kj + A_ik dotB_kj right)\n         textapply scalar product rule \n            fracddt(x y) = fracdxdt y + x fracdydt \n    = sum_k dotA_ik B_kj + sum_k A_ik dotB_kj\n         textsplit sum\nendalign*","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"But the last expression is just the component form of a sum of matrix products:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginequationlabeldiffprod\ndotOmega = dotA B + A dotB\nendequation","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"This is the matrix product rule, and we write its frule as","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"function frule(\n    (_, ΔA, ΔB),\n    ::typeof(*),\n    A::Matrix{<:RealOrComplex},\n    B::Matrix{<:RealOrComplex},\n)\n    Ω = A * B\n    ∂Ω = ΔA * B + A * ΔB\n    return (Ω, ∂Ω)\nend","category":"page"},{"location":"maths/arrays.html#Matrix-inversion","page":"Deriving array rules","title":"Matrix inversion","text":"","category":"section"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Ω = inv(A)","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Omega = A^-1","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"It's easiest to derive this rule from either of the two constraints:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginalign*\nOmega A = A^-1 A = I\nA Omega = A A^-1 = I\nendalign*","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"where I is the identity matrix.","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"We use the matrix product rule to differentiate the first constraint:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"dotOmega A + Omega dotA = 0","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Then, right-multiply both sides by A^-1 to isolate dotOmega:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginalign\n0  = dotOmega A A^-1 + Omega dotA A^-1 nonumber\n   = dotOmega I + Omega dotA A^-1\n        textuse  A A^-1 = I nonumber\n   = dotOmega + Omega dotA Omega\n        textsubstitute  A^-1 = Omega nonumber\ndotOmega\n   = -Omega dotA Omega\n        textsolve for  dotOmega labelinvdiff\nendalign","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"We write the frule as","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"function frule((_, ΔA), ::typeof(inv), A::Matrix{<:RealOrComplex})\n    Ω = inv(A)\n    ∂Ω = -Ω * ΔA * Ω\n    return (Ω, ∂Ω)\nend","category":"page"},{"location":"maths/arrays.html#Other-useful-identities","page":"Deriving array rules","title":"Other useful identities","text":"","category":"section"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"These identities are particularly useful:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginalign*\nfracddt left( Re(A) right) = Re(dotA)\nfracddt left( A^* right) = dotA^*\nfracddt left( A^mathsfT right) = dotA^mathsfT\nfracddt left( A^mathsfH right) = dotA^mathsfH\nfracddt left( sum_j  A_i ldots j ldots k right) =\n    sum_j dotA_i ldots j ldots k\nendalign*","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"where cdot^* is the complex conjugate (conj), and cdot^mathsfH = left(cdot^mathsfTright)^* is the conjugate transpose (the adjoint function).","category":"page"},{"location":"maths/arrays.html#Reverse-mode-rules","page":"Deriving array rules","title":"Reverse-mode rules","text":"","category":"section"},{"location":"maths/arrays.html#Approach-2","page":"Deriving array rules","title":"Approach","text":"","category":"section"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Reverse-mode rules are a little less intuitive, but we can re-use our pushforwards to simplify their derivation. Recall our program:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"t mapsto (ldots X_m ldots) mapsto Omega mapsto s","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"At any step in the program, if we have intermediates X_m, we can write down the derivative fracdsdt in terms of the tangents dotX_m = fracdX_mdt and adjoints overlineX_m = fracpartial spartial X_m","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginalign*\nfracdsdt\n    = sum_m Releft( sum_ildotsj\n           left( fracpartial spartial (X_m)_ildotsj right)^*\n           fracd (X_m)_ildotsjdt\n       right)\n    = sum_m Releft( sum_ildotsj\n           (overlineX_m)_ildotsj^*\n           (dotX_m)_ildotsj\n       right)\n    = sum_m Reip overlineX_m  dotX_m \nendalign*","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"where Re(cdot) is the real part of a number (real), and ipcdotcdot is the Frobenius inner product (LinearAlgebra.dot). Because this equation follows at any step of the program, we can equivalently write ","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"fracdsdt = Reip overlineOmega  dotOmega ","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"which gives the identity","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginequation labelpbident\nReip overlineOmega  dotOmega  = sum_m Reip overlineX_m  dotX_m \nendequation","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"For matrices and vectors, ipAB = tr(A^mathsfH B), and the identity simplifies to:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginequation labelpbidentmat\nReleft( trleft(\n    overlineOmega^mathsfH dotOmega\nright) right) =\nsum_m Re left( tr left(\n    overlineX_m^mathsfH dotX_m\nright) right)\nendequation","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"where tr(cdot) is the matrix trace (LinearAlgebra.tr) function. However, it is often cleaner and more general to work with the inner product.","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Our approach for deriving the adjoints overlineX_m is then:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Derive the pushforward (dotOmega in terms of dotX_m) using \\eqref{pf}.\nSubstitute this expression for dotOmega into the left-hand side of \\eqref{pbident}.\nManipulate until it looks like the right-hand side of \\eqref{pbident}.\nSolve for each overlineX_m.","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Note that the final expressions for the adjoints will not contain any dotX_m terms.","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"note: Note\nWhy do we conjugate, and why do we only use the real part of the dot product in \\eqref{pbident}? Recall from Complex Numbers that we treat a complex number as a pair of real numbers. These identities are a direct consequence of this convention. Consider fracdsdt for a scalar function f (x + i y) mapsto (u + i v):beginalign*\nfracdsdt\n    = Reip overlinex + i overliney  dotx + i doty  \n    = Releft(\n           left( overlinex + i overliney right)^*\n           left( dotx + i doty right)\n       right) \n    = Releft(\n           left( overlinex - i overliney right)\n           left( dotx + i doty right)\n       right) \n    = Releft(\n           left( overlinex dotx + overliney doty right) +\n           i left( overlinex doty - overliney dotx right)\n       right)\n    = overlinex dotx + overliney doty\nendalign*which is exactly what the identity would produce if we had written the function as f (x y) mapsto (u v).","category":"page"},{"location":"maths/arrays.html#Useful-properties-of-the-inner-product","page":"Deriving array rules","title":"Useful properties of the inner product","text":"","category":"section"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Several properties of the Frobenius inner product come in handy. First, it is linear in its second argument and conjugate linear in its first. That is, for arrays A B C D and scalars a and b,","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginalign\nipA+BC+D = ipAC + ipBC + ipAD + ipBD labeliplinear\nipaAbB = a^* b ipAB nonumber\nendalign","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Second, swapping arguments is equivalent to conjugating the inner product:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginequation\nipAB = ipBA^* labelipconj\nendequation","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Third, for matrices and vectors A, B, and C, we can move arguments from the left or right of one side to the other using the matrix adjoint:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginequation\nipABCD = ipB^mathsfH ACD = ipB^mathsfH A D^mathsfHC labelipperm\nendequation","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Fourth, the inner product of two arrays A and B is equivalent to the sum of the elementwise inner products of the two arrays:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginequation\nipAB = sum_ildotsk ipA_ildotskB_ildotsk = sum_ildotsk A_ildotsk^* B_ildotsk\nendequation","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"As a result, only elements that are nonzero on both sides contribute to the inner product. This property is especially useful when deriving rules involving structurally sparse arrays.","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Now let's derive a few pullbacks using this approach.","category":"page"},{"location":"maths/arrays.html#Matrix-multiplication-2","page":"Deriving array rules","title":"Matrix multiplication","text":"","category":"section"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Ω = A * B","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"We above derived in \\eqref{diffprod} the pushforward","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"dotOmega = dotA B + A dotB","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Using \\eqref{pbidentmat}, we now multiply by overlineOmega^mathsfH and take the real trace:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginalign*\nReipoverlineOmegadotOmega\n    = Re ipoverline OmegadotA B + A dotB\n            textsubstitute  dotOmega text from  eqrefdiffprod\n    = Re ipoverline OmegadotA B + Re ipoverline OmegaA dotB\n            textexpand using  eqrefiplinear \n    = Re ipoverline Omega B^mathsfHdotA + Re ipA^mathsfH overline OmegadotB\n            textrearrange the left term using  eqrefipperm\n    = Re ipoverline AdotA + Re ipoverline BdotB\n            textright-hand side of  eqrefpbidentmat\nendalign*","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"That's it! The expression is in the desired form to solve for the adjoints by comparing the last two lines:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"overline A = overline Omega B^mathsfH qquad overline B = A^mathsfH overline Omega","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Using ChainRules's notation, we would implement the rrule as","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"function rrule(::typeof(*), A::Matrix{<:RealOrComplex}, B::Matrix{<:RealOrComplex})\n    function times_pullback(ΔΩ)\n        ∂A = @thunk(ΔΩ * B')\n        ∂B = @thunk(A' * ΔΩ)\n        return (NoTangent(), ∂A, ∂B)\n    end\n    return A * B, times_pullback\nend","category":"page"},{"location":"maths/arrays.html#Matrix-inversion-2","page":"Deriving array rules","title":"Matrix inversion","text":"","category":"section"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Ω = inv(A)","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"In \\eqref{invdiff}, we derived the pushforward as","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"dotOmega = -Omega dotA Omega","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Using \\eqref{pbidentmat},","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginalign*\nReipoverlineOmegadotOmega\n    = ReipoverlineOmega-Omega dotA Omega\n            textsubstitute  eqrefinvdiff\n    = Reip-Omega^mathsfH overlineOmega Omega^mathsfHdotA\n            textrearrange using  eqrefipperm\n    = ReipoverlineAdotA\n            textright-hand side of  eqrefpbidentmat\nendalign*","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"we can now solve for overlineA:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"overlineA = -Omega^mathsfH overlineOmega Omega^mathsfH","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"We can implement the resulting rrule as","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"function rrule(::typeof(inv), A::Matrix{<:RealOrComplex})\n    Ω = inv(A)\n    function inv_pullback(ΔΩ)\n        ∂A = -Ω' * ΔΩ * Ω'\n        return (NoTangent(), ∂A)\n    end\n    return Ω, inv_pullback\nend","category":"page"},{"location":"maths/arrays.html#A-multidimensional-array-example","page":"Deriving array rules","title":"A multidimensional array example","text":"","category":"section"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"We presented the approach for deriving pushforwards and pullbacks for arrays of arbitrary dimensions, so let's cover an example. For multidimensional arrays, it's often easier to work in component form. Consider the following function:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Ω = sum(abs2, X::Array{<:RealOrComplex,3}; dims=2)::Array{<:Real,3}","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"which we write as","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Omega_i1k = sum_j X_ijk^2\n             = sum_j Re ipX_ijkX_ijk","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"The pushforward from \\eqref{pf} is","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginalign\ndotOmega_i1k\n    = sum_j ReipdotX_ijkX_ijk + ipX_ijkdotX_ijk nonumber\n    = sum_j ReipX_ijkdotX_ijk^* + ipX_ijkdotX_ijk nonumber\n    = sum_j 2 ReipX_ijkdotX_ijk labelsumabspf\nendalign","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"where in the last step we have used the fact that for all real a and b,","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"(a + i b) + (a + i b)^*\n    = (a + i b) + (a - i b)\n    = 2 a\n    = 2 Re (a + i b)","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Because none of this derivation depended on the index (or indices), we implement frule generically as","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"function frule(\n    (_, _, ΔX),\n    ::typeof(sum),\n    ::typeof(abs2),\n    X::Array{<:RealOrComplex};\n    dims = :,\n)\n    Ω = sum(abs2, X; dims = dims)\n    ∂Ω = sum(2 .* real.(conj.(X) .* ΔX); dims = dims)\n    return (Ω, ∂Ω)\nend","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"We can now derive the reverse-mode rule. The elementwise form of \\eqref{pbident} is","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginalign*\nReip overlineOmega  dotOmega \n    = Re left( sum_ik overlineOmega_i1k^*\n           dotOmega_i1k right)\n            textexpand left-hand side of  eqrefpbident\n    = Re left(sum_ijk overlineOmega_i1k^*\n           2 Releft( X_ijk^* dotX_ijk right)\n       right)\n            textsubstitute  eqrefsumabspf\n    = Re left( sum_ijk\n           left(\n               2 Re left( overlineOmega_i1k right)\n               X_ijk^*\n           right) dotX_ijk\n       right)\n            textbring  dotX_ijk text outside of  Re\n    = sum_ijk Reip2 Re left( overlineOmega_i1k right) X_ijkdotX_ijk\n            textrewrite as an inner product\n    = sum_ijk ReipoverlineX_ijkdotX_i1k\n            textright-hand side of  eqrefpbident\nendalign*","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"We now solve for overlineX:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"overlineX_ijk = 2Re left( overlineOmega_i1k right) X_ijk","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Like the frule, this rrule can be implemented generically:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"function rrule(::typeof(sum), ::typeof(abs2), X::Array{<:RealOrComplex}; dims = :)\n    function sum_abs2_pullback(ΔΩ)\n        ∂abs2 = NoTangent()\n        ∂X = @thunk(2 .* real.(ΔΩ) .* X)\n        return (NoTangent(), ∂abs2, ∂X)\n    end\n    return sum(abs2, X; dims = dims), sum_abs2_pullback\nend","category":"page"},{"location":"maths/arrays.html#Functions-that-return-a-tuple","page":"Deriving array rules","title":"Functions that return a tuple","text":"","category":"section"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Every Julia function returns a single output. For example, let's look at LinearAlgebra.logabsdet, the logarithm of the absolute value of the determinant of a matrix, which returns log det(A) and operatornamesign(det A) = fracdet A det A :","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"(l, s) = logabsdet(A)","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"The return type is actually a single output, a tuple of scalars, but when deriving, we treat them as multiple outputs. The left-hand side of \\eqref{pbident} then becomes a sum over terms, just like the right-hand side.","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Let's derive the forward- and reverse-mode rules for logabsdet.","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginalign*\nl = log det(A)\ns = operatornamesign(det(A))\nendalign*","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"where operatornamesign(x) = fracxx.","category":"page"},{"location":"maths/arrays.html#Forward-mode-rule","page":"Deriving array rules","title":"Forward-mode rule","text":"","category":"section"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"To make this easier, let's break the computation into more manageable steps:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginalign*\nd = det(A)\na = d = sqrtRe left( d^* d right)\nl = log a\ns = fracda\nendalign*","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"We'll make frequent use of the identities:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"d = a s","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"s^* s = fracd^* da^2 = fraca^2a^2 = 1","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"It will also be useful to define b = trleft( A^-1 dotA right).","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"For dotd, we use the pushforward for the determinant given in section 2.2.4 of [Giles2008ext]:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"dotd = d b","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Now we'll compute the pushforwards for the remaining steps.","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginalign*\ndota = frac12 a fracddt\n                         Releft( d^* d right)\n        = frac22 a Re left( d^* dotd right)\n        = Re left( s^* dotd right)\n             textuse  d = a s \n        = Re left( s^* d b right)\n             textsubstitute  dotd \ndotl = a^-1 dota\n        = a^-1 Re left( s^* d b right)\n             textsubstitute  dota\n        = Re left( s^* s b right)\n             textuse  d = a s \n        = Re left(b right)\n             textuse  s^* s = 1\ndots = a^-1 dotd - a^-2 d dota\n        = a^-1 left( dotd - dota s right)\n             textuse  d = a s \n        = a^-1 left(\n               dotd - Re left( s^* dotd right) s\n           right)\n             textsubstitute  dota\n        = a^-1 left(\n               dotd - left(\n                   s^* dotd -\n                   i Im left( s^* dotd right)\n               right) s\n           right)\n             textuse  Re(x) = x - i Im(x)\n        = a^-1 left(\n               dotd - left( s^* s right) dotd +\n               i Im left( s^* dotd right) s \n               right)\n        = i a^-1 Im left( s^* dotd right) s\n             textuse  s^* s = 1\n        = i a^-1 Im left( s^* d b right) s\n             textsubstitute  dotd\n        = i Im left( s^* s b right) s\n             textuse  d = a s \n        = i Im(b) s\n             textuse  s^* s = 1\nendalign*","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Note that the term b is reused. In summary, after all of that work, the final pushforward is quite simple:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginalign\nb = tr left( A^-1 dotA right) labellogabsdet_b \ndotl = Re(b) labellogabsdet_ldot\ndots = i Im(b) s labellogabsdet_sdot\nendalign","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"We can define the frule as:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"function frule((_, ΔA), ::typeof(logabsdet), A::Matrix{<:RealOrComplex})\n    # The primal function uses the lu decomposition to compute logabsdet\n    # we reuse this decomposition to compute inv(A) * ΔA\n    F = lu(A, check = false)\n    Ω = logabsdet(F)  # == logabsdet(A)\n    b = tr(F \\ ΔA)  # == tr(inv(A) * ΔA)\n    s = last(Ω)\n    ∂l = real(b)\n    # for real A, ∂s will always be zero (because imag(b) = 0)\n    # this is type-stable because the eltype is known\n    ∂s = eltype(A) <: Real ? ZeroTangent() : im * imag(b) * s\n    # tangents of tuples are of type Tangent{<:Tuple}\n    ∂Ω = Tangent{typeof(Ω)}(∂l, ∂s)\n    return (Ω, ∂Ω)\nend","category":"page"},{"location":"maths/arrays.html#Reverse-mode-rule","page":"Deriving array rules","title":"Reverse-mode rule","text":"","category":"section"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginalign*\nReipoverlineldotl + Reipoverlinesdots\n     textleft-hand side of  eqrefpbidentmat\n= Releft( overlinel^* dotl + overlines^* dots right) \n= Releft( \n       overlinel^* Re(b) + i overlines^* s Im(b)\n   right)\n        textsubstitute  eqreflogabsdet_ldot text and  eqreflogabsdet_sdot \n= Releft( \n       Releft( overlinel right) Re(b) -\n       Im left( overlines^* s right) Im(b)\n   right)\n        textdiscard imaginary parts \n= Releft(\n       left(\n           Re left( overlinel right) +\n           i Im left( overlines^* s right)\n       right) b\n   right)\n        textgather parts of  b \n= Releft(\n       left(\n           Re left( overlinel right) +\n           i Im left( overlines^* s right)\n       right)\n       tr(A^-1 dotA)\n   right)\n        textsubstitute  b text from  eqreflogabsdet_b \n= Releft( tr left(\n       left(\n           Re left( overlinel right) +\n           i Im left( overlines^* s right)\n       right)\n       A^-1 dotA\n   right) right)\n        textbring scalar within  tr \n= Reip\n        left(\n            Re left( overlinel right) + i Im left( s^* overlines right)\n        right) A^-mathsfH\n    dotA  textrewrite as inner product\n= ReipoverlineAdotA  textright-hand side of  eqrefpbidentmat\nendalign*","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Now we solve for overlineA:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginalign*\noverlineA = left(\n    Re left( overlinel right) +\n    i Im left( s^* overlines right)\nright) A^-mathsfH\nendalign*","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"The rrule can be implemented as","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"function rrule(::typeof(logabsdet), A::Matrix{<:RealOrComplex})\n    # The primal function uses the lu decomposition to compute logabsdet\n    # we reuse this decomposition to compute inv(A)\n    F = lu(A, check = false)\n    Ω = logabsdet(F)  # == logabsdet(A)\n    s = last(Ω)\n    function logabsdet_pullback(ΔΩ)\n        (Δl, Δs) = ΔΩ\n        f = conj(s) * Δs\n        imagf = f - real(f)  # 0 for real A and Δs, im * imag(f) for complex A and/or Δs\n        g = real(Δl) + imagf\n        ∂A = g * inv(F)'  # == g * inv(A)'\n        return (NoTangent(), ∂A)\n    end\n    return (Ω, logabsdet_pullback)\nend","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"note: Note\nIt's a good idea when deriving pushforwards and pullbacks to verify that they make sense. For the pushforward, since l is real, it follows that dotl is too.What about dots? Well, s = fracdd is point on the unit circle in the complex plane. Multiplying a complex number by i rotates it counter-clockwise by 90°. So the expression for dots takes a real number, Im(b), multiplies by s to make it parallel to s, then multiplies by i to make it perpendicular to s, that is, perfectly tangent to the unit complex circle at s.For the pullback, it again follows that only the real part of overlinel is pulled back.s^* rotates a number parallel to s to the real line. So s^* overlines rotates overlines so that its imaginary part is the part that was tangent to the complex circle at s, while the real part is the part that was not tangent. Then the pullback isolates the imaginary part, which effectively is a projection. That is, any part of the adjoint overlines that is not tangent to the complex circle at s will not contribute to overlineA.","category":"page"},{"location":"maths/arrays.html#Implicit-functions","page":"Deriving array rules","title":"Implicit functions","text":"","category":"section"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Sometimes a function is only defined implicitly, and internally some solver or iterative algorithm is used to compute the result. We can still in some cases derive rules by considering only the implicit functions and not the internals. One example is the solution X to the Sylvester equation","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"A X + X B = -C","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"for inputs A, B, and C. We can also write this solution as X = operatornamesylvester(A B C), which in Julia is computed using LinearAlgebra.sylvester(A, B, C).","category":"page"},{"location":"maths/arrays.html#Forward-mode-Rule","page":"Deriving array rules","title":"Forward-mode Rule","text":"","category":"section"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"We start by differentiating the implicit function:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"dotA X + A dotX + dotX B + X dotB = -dotC","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Then we isolate the terms with dotX on one side:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginalign\nA dotX + dotX B\n    = -dotC - dotA X - X dotB labelsylpfimplicit\n    = -(dotC + dotA X + X dotB) nonumber\nendalign","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"So the pushforward is the solution to a different Sylvester equation:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"dotX = operatornamesylvester(A B dotC + dotA X + X dotB)","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"The frule can be implemented as","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"function frule((_, ΔA, ΔB, ΔC), ::typeof(sylvester), A, B, C)\n    X = sylvester(A, B, C)\n    return X, sylvester(A, B, ΔC + ΔA * X + X * ΔB)\nend","category":"page"},{"location":"maths/arrays.html#Reverse-mode-Rule","page":"Deriving array rules","title":"Reverse-mode Rule","text":"","category":"section"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Like with the pushforward, it's easiest to work with the implicit function. We start by introducing some dummy -Z and taking its inner product with both sides of \\eqref{sylpfimplicit}:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"ip-ZA dotX + dotX B = ip-Z-dotC - dotA X - X dotB","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Then we expand","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"ip-ZA dotX + ip-ZdotX B = ipZdotC + ipZdotA X + ipZX dotB","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Now permute:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"ip-A^mathsfH ZdotX + ip-Z B^mathsfHdotX = ipZdotC + ipZ X^mathsfHdotA + ipX^mathsfH ZdotB","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Then combine:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"ip-(A^mathsfH Z + Z B^mathsfH)dotX = ipZ X^mathsfHdotA + ipX^mathsfH ZdotB + ipZdotC","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"This is almost exactly the identity we need to solve for overlineA, overlineB, and overlineC. To manipulate it to the right form, we need only define A^mathsfH Z + Z B^mathsfH = -overlineX. This yet another Sylvester equation, so letting Z = overlineC, our final pullback is:","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"beginalign*\noverlineC = operatornamesylvester(A^mathsfH B^mathsfH overlineX)\n             = operatornamesylvester(B A overlineX^mathsfH)^mathsfH\noverlineA = overlineC X^mathsfH\noverlineB = X^mathsfH overlineC\nendalign*","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"The rrule can be implemented as","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"function rrule(::typeof(sylvester), A, B, C)\n    X = sylvester(A, B, C)\n    function sylvester_pullback(ΔX)\n        ∂C = copy(sylvester(B, A, copy(ΔX'))')\n        return NoTangent(), @thunk(∂C * X'), @thunk(X' * ∂C), ∂C\n    end\n    return X, sylvester_pullback\nend","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"Note, however, that the Sylvester equation is usually solved using the Schur decomposition of A and B. These Schur decompositions can be reused to solve the Sylvester equations in the pushforward and pullback. See the implementation in ChainRules for details.","category":"page"},{"location":"maths/arrays.html#More-examples","page":"Deriving array rules","title":"More examples","text":"","category":"section"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"For more instructive examples of array rules, see [Giles2008ext] (real vector and matrix rules) and the LinearAlgebra rules in ChainRules. For differentiating the LU decomposition, see this blog post by Seth Axen.","category":"page"},{"location":"maths/arrays.html#References","page":"Deriving array rules","title":"References","text":"","category":"section"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"[Giles2008]: Giles M. B. Collected Matrix Derivative Results for Forward and Reverse Mode Algorithmic Differentiation. In: Advances in Automatic Differentiation. Lecture Notes in Computational Science and Engineering, vol 64: pp 35-44. Springer, Berlin (2008). doi: 10.1007/978-3-540-68942-3_4. pdf","category":"page"},{"location":"maths/arrays.html","page":"Deriving array rules","title":"Deriving array rules","text":"[Giles2008ext]: Giles M. B. An Extended Collection of Matrix Derivative Results for Forward and Reverse Mode Algorithmic Differentiation. (unpublished). pdf","category":"page"},{"location":"rule_author/testing.html#Testing-your-rules","page":"Testing your rules","title":"Testing your rules","text":"","category":"section"},{"location":"rule_author/testing.html","page":"Testing your rules","title":"Testing your rules","text":"ChainRulesTestUtils.jl provides tools for writing tests based on FiniteDifferences.jl. Take a look at the documentation or the existing ChainRules.jl tests to see how to write the tests.","category":"page"},{"location":"rule_author/testing.html","page":"Testing your rules","title":"Testing your rules","text":"warning: Warning\nDon't use analytical derivations for derivatives in the tests. Those are what you use to define the rules, and so cannot be confidently used in the test. If you misread/misunderstood them, then your tests/implementation will have the same mistake. Use finite differencing methods instead, as they are based on the primal computation.","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html#grad_acc","page":"Gradient accumulation","title":"Gradient Accumulation","text":"","category":"section"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"Consider some function f(x) = g(x) + h(x). If we would like the derivative of f with respect to x we must compute it for each part and then sum them, i.e. fracpartial fpartial x = fracpartial gpartial x + fracpartial hpartial x. In general, we must accumulate (sum) gradients from each sub-part of a program where a variable is used.","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"Consider for example:","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"function sum_first_and_second(X::Array{Float64})\n    a = X[1]\n    b = X[2]\n    y = a + b\n    return y\nend","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"The AD software must transform that into something which repeatedly sums up the gradient of each part: X̄ = ā + b̄.","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"This requires that all tangent types D must implement +: +(::D, ::D)::D.","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"We can note that in this particular case ā and b̄ will both be arrays. This operation (X̄ = ā + b̄) will allocate one array to hold ā, another one to hold b̄, and a third one to hold ā + b̄. This is three allocations. Allocations are not free, they increase the time the program takes to run by a nontrivial amount, even with a good allocator and a good garbage collector.","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html#Maybe-mutating-accumulation-(add!!)","page":"Gradient accumulation","title":"Maybe-mutating accumulation (add!!)","text":"","category":"section"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"We can note that in the above that neither ā nor b̄ are ever used again after accumulating to get X̄. Furthermore, Arrays are mutable. That means we could over-write either ā or b̄ and use the result as X̄:","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"ā .+= b̄\nX̄ = ā","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"This cuts our allocations down to 2, just ā and b̄.","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"However, we have a bit of a problem that not all types are mutable, so this pattern is hard to apply in general. To deal with that ChainRulesCore provides add!!. Per the BangBang.jl convention, this is a maybe mutating addition. It may mutate its first argument (if it is mutable), but it will definitely return the correct result. We would write using that as X̄ = add!!(ā, b̄): which would in this case give us just 2 allocations. AD systems can generate add!! instead of + when accumulating gradient to take advantage of this.","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html#Inplaceable-Thunks-(InplaceableThunks)-avoid-allocating-values-in-the-first-place.","page":"Gradient accumulation","title":"Inplaceable Thunks (InplaceableThunks) avoid allocating values in the first place.","text":"","category":"section"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"We got down to two allocations from using add!!, but can we do better? We can think of having a tangent type which acts on a partially accumulated result, to mutate it to contain its current value plus the partial derivative being accumulated. Rather than having an actual computed value, we can just have a thing that will act on a value to perform the addition. Let's illustrate it with our example.","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"b̄ is the partial for X[2] and its value can be computed by:","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"b̄ = zeros(size(X))\nb̄[2] = ȳ  # the scalar sensitivity of the `sum_first_and_second` output","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"b̄ is a matrix entirely of zeros, except for at the index 2, where it is set to the output sensitivity ȳ. ā is similar, except with the non-zero at index 1.","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"What is the action of b̄ upon ā, to get the same result as X̄ = add!!(ā, b̄) (or X̄ = ā + b̄ for that matter)? It is:","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"function b̄_add!(ā)\n    ā[2] += ȳ\n    return ā\nend","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"We don't need to worry about all those zeros since x + 0 == x.","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"InplaceableThunk is the type we have to represent derivatives as gradient accumulating actions. We must note that to do this we do need a value form of ā for b̄ to act upon. For this reason every inplaceable thunk has both a val field holding the value representation, and a add! field holding the action representation. The val field use a plain Thunk to avoid the computation (and thus allocation) if it is unused.","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"note: Do we need both representations?\nRight now every InplaceableThunk has two fields that need to be specified. The value form (represented as a the Thunk typed field), and the action form (represented as the add! field). It is possible in a future version of ChainRulesCore.jl we will work out a clever way to find the zero tangent for arbitrary primal values. Given that, we could always just determine the value form from inplaceable.add!(zero_tangent(primal)). There are some technical difficulties in finding the zero tangents, but this may be solved at some point.","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"The + operation on InplaceableThunks is overloaded to unthunk that val field to get the value form. Where as the add!! operation is overloaded to call add! to invoke the action.","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"With getindex defined to return an InplaceableThunk, we now get to X̄ = add!!(ā, b̄) requires only a single allocation. This allocation occurs when unthunking ā, which is then mutated to become X̄. This is basically as good as we can get: if we want X̄ to be an Array then at some point we need to allocate that array.","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"note: Can we do more? Deferred accumulation\nWe could keep going further to drop allocations if we really wanted. If we didn't care about X̄ being an Array then we could defer its computation too. X̄ = @thunk add!!(ā, b̄). This kind of deferral will work fine and you can keep chaining it. It does start to burn stack space, and might make the compiler's optimization passes cry. But it's valid and should work fine.","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html#Examples-of-InplaceableThunks","page":"Gradient accumulation","title":"Examples of InplaceableThunks","text":"","category":"section"},{"location":"rule_author/superpowers/gradient_accumulation.html#getindex","page":"Gradient accumulation","title":"getindex","text":"","category":"section"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"The aforementioned getindex is really the poster child for this. Consider something like:","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"function mysum(X::Array{Float64})\n    total = 0.0\n    for i in eachindex(X)\n        total += X[i]\n    end\n    return total\nend","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"If one only has value representation of derivatives one ends up having to allocate a derivative array for every single element of the original array X. That's terrible. On the other hand, with the action representation that InplaceableThunks provide, there is just a single Array allocated. One can see the getindex rule in ChainRules.jl for the implementation.","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html#matmul-etc-(*)","page":"Gradient accumulation","title":"matmul etc (*)","text":"","category":"section"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"Multiplication of scalars/vectors/matrices of compatible dimensions can all also have their derivatives represented as an InplaceableThunk. These tend to pivot around that add! action being defined along the lines of: X̄ -> mul!(X̄, A', Ȳ, true, true). Where 5-arg mul! is the in place multiply-add operation. mul!(X̄, A', Ȳ, true, true) has the same effect as (X̄ .+= A'*Ȳ) but avoids allocating  the matrix  A'*Ȳ This is one of the fundamental operations provided by BLAS – including the application of the conjugate transpose. e.g. the Matrix-Matrix form is GEMM (GEneralized Matrix-Matrix Multiplication), the Matrix-Vector form is GEMV (GEneralized Matrix-Vector Multiplication) etc. Under the hood doing it out of place is going to call one of these methods anyway, but on a freshly allocated output array. So we are going to hit a very efficient implementation and get the addition for free.","category":"page"},{"location":"rule_author/superpowers/gradient_accumulation.html","page":"Gradient accumulation","title":"Gradient accumulation","text":"One can see the * rules in ChainRules.jl for the implementations","category":"page"},{"location":"FAQ.html#FAQ","page":"FAQ","title":"FAQ","text":"","category":"section"},{"location":"FAQ.html#What-is-up-with-the-different-symbols?","page":"FAQ","title":"What is up with the different symbols?","text":"","category":"section"},{"location":"FAQ.html#Δx,-x,-dx","page":"FAQ","title":"Δx, ∂x, dx","text":"","category":"section"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"ChainRules uses these perhaps atypically. As a notation that is the same across propagators, regardless of direction (in contrast see ẋ and x̄ below).","category":"page"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"Δx is the input to a propagator, (i.e a seed for a pullback; or a perturbation for a pushforward).\n∂x is the output of a propagator.\ndx could be either input or output.","category":"page"},{"location":"FAQ.html#dots-and-bars:-\\dot{y}-\\dfrac{y}{x}-\\overline{x}","page":"FAQ","title":"dots and bars: doty = dfracyx = overlinex","text":"","category":"section"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"v̇ is a derivative of the input moving forward: v = fracvx for input x, intermediate value v.\nv̄ is a derivative of the output moving backward: v = fracyv for output y, intermediate value v.","category":"page"},{"location":"FAQ.html#others","page":"FAQ","title":"others","text":"","category":"section"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"Ω is often used as the return value of the function. Especially, but not exclusively, for scalar functions.\nΔΩ is thus a seed for the pullback.\n∂Ω is thus the output of a pushforward.","category":"page"},{"location":"FAQ.html#Why-does-rrule-return-the-primal-function-evaluation?","page":"FAQ","title":"Why does rrule return the primal function evaluation?","text":"","category":"section"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"You might wonder why frule(f, x) returns f(x) and the derivative of f at x, and similarly for rrule returning f(x) and the pullback for f at x. Why not just return the pushforward/pullback, and let the user call f(x) to get the answer separately?","category":"page"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"There are three reasons the rules also calculate the f(x).","category":"page"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"For some rules an alternative way of calculating f(x) can give the same answer while also generating intermediate values that can be used in the calculations required to propagate the derivative.\nFor many rrules the output value is used in the definition of the pullback. For example tan, sigmoid etc.\nFor some frules there exists a single, non-separable operation that will compute both derivative and primal result. For example, this is the case for many of the methods for differential equation sensitivity analysis.","category":"page"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"For more information and examples see the design notes on changing the primal.","category":"page"},{"location":"FAQ.html#Where-are-the-derivatives-for-keyword-arguments?","page":"FAQ","title":"Where are the derivatives for keyword arguments?","text":"","category":"section"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"Pullbacks do not return a sensitivity for keyword arguments; similarly, pushforwards do not accept a perturbation for keyword arguments. This is because in practice functions are very rarely differentiable with respect to keyword arguments.","category":"page"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"As a rule, keyword arguments tend to control side-effects, like logging verbosity, or to be functionality-changing to perform a different operation, e.g. dims=3, and thus not differentiable.","category":"page"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"To the best of our knowledge no Julia AD system, with support for the definition of custom primitives, supports differentiating with respect to keyword arguments. At some point in the future ChainRules may support these. Maybe.","category":"page"},{"location":"FAQ.html#faq_abstract_zero","page":"FAQ","title":"What is the difference between ZeroTangent and NoTangent ?","text":"","category":"section"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"ZeroTangent and NoTangent act almost exactly the same in practice: they result in no change whenever added to anything. Odds are if you write a rule that returns the wrong one everything will just work fine. We provide both to allow for clearer writing of rules, and easier debugging.","category":"page"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"ZeroTangent() represents the fact that if one perturbs (adds a small change to) the matching primal, there will be no change in the behaviour of the primal function. For example, in fst(x, y) = x, the derivative of fst with respect to y is ZeroTangent(). fst(10, 5) == 10 and if we add 0.1 to 5 we still get fst(10, 5.1) == 10.","category":"page"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"NoTangent() represents the fact that if one perturbs the matching primal, the primal function will now error. For example, in access(xs, n) = xs[n], the derivative of access with respect to n is NoTangent(). access([10, 20, 30], 2) == 20, but if we add 0.1 to 2 we get access([10, 20, 30], 2.1) which errors as indexing can't be applied at fractional indexes.","category":"page"},{"location":"FAQ.html#Why-do-I-get-an-error-involving-nothing?","page":"FAQ","title":"Why do I get an error involving nothing?","text":"","category":"section"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"When no custom frule or rrule exists, if you try to call one of those, it will return nothing by default. As a result, you may encounter errors like","category":"page"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"MethodError: no method matching iterate(::Nothing)","category":"page"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"Sometimes you think you have implemented the right rule, but it is called with a slightly different set of arguments than you expected. You can use Cthulhu.jl to dive into the call stack and figure out which method you are missing.","category":"page"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"An alternative is to call back into AD: read the documentation on rule configuration to know more.","category":"page"},{"location":"FAQ.html#When-to-use-ChainRules-vs-ChainRulesCore?","page":"FAQ","title":"When to use ChainRules vs ChainRulesCore?","text":"","category":"section"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"ChainRulesCore.jl is a light-weight dependency for defining rules for functions in your packages, without you needing to depend on ChainRules.jl itself. It has almost no dependencies of its own. If you only want to define rules, not use them, then you probably only want to load ChainRulesCore.jl.","category":"page"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"ChainRules.jl provides the full functionality for AD systems. In particular, it has all the rules for Base Julia and the standard libraries. It is thus a much heavier package to load. AD systems making use of frules and rrules should load ChainRules.jl.","category":"page"},{"location":"FAQ.html#Where-should-I-put-my-rules?","page":"FAQ","title":"Where should I put my rules?","text":"","category":"section"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"We recommend adding custom rules to your own packages with ChainRulesCore.jl. It is good to have them in the same package that defines the original function. This avoids type-piracy, and makes it easy to keep in-sync. ChainRulesCore is a very light-weight dependency.","category":"page"},{"location":"FAQ.html#How-do-I-test-my-rules?","page":"FAQ","title":"How do I test my rules?","text":"","category":"section"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"You can use ChainRulesTestUtils.jl to test your custom rules. ChainRulesTestUtils.jl has some dependencies, so it is a separate package from ChainRulesCore.jl. This means your package can depend on the light-weight ChainRulesCore.jl, and make ChainRulesTestUtils.jl a test-only dependency.","category":"page"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"Remember to read the section On writing good rrule / frule methods.","category":"page"},{"location":"FAQ.html#Is-removing-a-thunk-a-breaking-change?","page":"FAQ","title":"Is removing a thunk a breaking change?","text":"","category":"section"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"Removing thunks is not considered a breaking change. This is because (in principle) removing them changes the implementation of the values returned by an rrule, not the value that they represent. This is morally the same as similar issues discussed in ColPrac, such as details of floating point arithmetic changing.","category":"page"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"On a practical level, it's important that this is the case because thunks are a bit of a hack, and over time it is hoped that the need for them will reduce, as they increase code-complexity and place additional stress on the compiler.","category":"page"},{"location":"FAQ.html#Where-can-I-learn-more-about-AD-?","page":"FAQ","title":"Where can I learn more about AD ?","text":"","category":"section"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"There are not so many truly excellent learning resources for autodiff out there in the world, which is a bit sad. The list here is incomplete, but is vetted for quality.","category":"page"},{"location":"FAQ.html","page":"FAQ","title":"FAQ","text":"Automatic Differentiation for Dummies keynote video by Simon Peyton Jones: particularly good if you like pure math type thinking.\n\"What types work with differentiation? comment on DexLang GitHub issue by Dan Zheng: summarizes several years of insights from the Swift AD work.\nMIT 18337 lecture notes 8-10 by Christopher Rackauckas and David P. Sanders: moves fast from basic to advanced, particularly good if you like applicable mathematics\nAutomatic Differentiation and Application: Good introduction\nSolving Stiff Ordinary Differential Equations: ignore the ODE stuff, most of this is about Sparse AutoDiff, can skip/skim this one\nBasic Parameter Estimation, Reverse-Mode AD, and Inverse Problems: use in optimization, and details connections of other math.\nDifferentiable Programming and Neural Differential Equations: Includes custom primitive derivations for equation solvers.\nDiff-Zoo Jupyter Notebook Book by Mike Innes, has implementations and explanations.\n\"Evaluating Derivatives\" by Griewank and Walther is the best book at least for reverse-mode. It also covers forward-mode though (by its own admission) not as well, it never mentioned dual numbers which is an unfortunate lack.","category":"page"},{"location":"rule_author/superpowers/mutation_support.html#Mutation-Support","page":"Mutation Support (experimental)","title":"Mutation Support","text":"","category":"section"},{"location":"rule_author/superpowers/mutation_support.html","page":"Mutation Support (experimental)","title":"Mutation Support (experimental)","text":"ChainRulesCore.jl offers experimental support for mutation, targeting use in forward mode AD. (Mutation support in reverse mode AD is more complicated and will likely require more changes to the interface)","category":"page"},{"location":"rule_author/superpowers/mutation_support.html","page":"Mutation Support (experimental)","title":"Mutation Support (experimental)","text":"warning: Experimental\nThis page documents an experimental feature. Expect breaking changes in minor versions while this remains. It is not suitable for general use unless you are prepared to modify how you are using it each minor release. It is thus suggested that if you are using it to use tilde bounds on supported minor versions.","category":"page"},{"location":"rule_author/superpowers/mutation_support.html#MutableTangent","page":"Mutation Support (experimental)","title":"MutableTangent","text":"","category":"section"},{"location":"rule_author/superpowers/mutation_support.html","page":"Mutation Support (experimental)","title":"Mutation Support (experimental)","text":"The MutableTangent type is designed to be a partner to the Tangent type, with specific support for being mutated in place. It is required to be a structural tangent, having one tangent for each field of the primal object.","category":"page"},{"location":"rule_author/superpowers/mutation_support.html","page":"Mutation Support (experimental)","title":"Mutation Support (experimental)","text":"Technically, not all mutable structs need to use MutableTangent to represent their tangents. Just like not all structs need to use Tangents. Common examples away from this are natural tangent types like for arrays. However, if one is setting up to use a custom tangent type for this it is sufficiently off the beaten path that we can not provide much guidance.","category":"page"},{"location":"rule_author/superpowers/mutation_support.html#zero_tangent","page":"Mutation Support (experimental)","title":"zero_tangent","text":"","category":"section"},{"location":"rule_author/superpowers/mutation_support.html","page":"Mutation Support (experimental)","title":"Mutation Support (experimental)","text":"The zero_tangent function functions to give you a zero (i.e. additive identity) for any primal value. The ZeroTangent type also does this. The difference is that zero_tangent is in general full structural tangent mirroring the structure of the primal. To be technical the promise of zero_tangent is that it will be a value that supports mutation. However, in practice[1] this is achieved through in a structural tangent For mutation support this is important, since it means that there is mutable memory available in the tangent to be mutated when the primal changes. To support this you thus need to make sure your zeros are created in various places with zero_tangent rather than []ZeroTangent](@ref).","category":"page"},{"location":"rule_author/superpowers/mutation_support.html","page":"Mutation Support (experimental)","title":"Mutation Support (experimental)","text":"It is also useful for reasons of type stability, since it forces a consistent type (generally a structural tangent) for any given primal type. For this reason AD system implementors might chose to use this to create the tangent for all literal values they encounter, mutable or not, and to process the output of frules to convert ZeroTangent into corresponding zero_tangents.","category":"page"},{"location":"rule_author/superpowers/mutation_support.html#Writing-a-frule-for-a-mutating-function","page":"Mutation Support (experimental)","title":"Writing a frule for a mutating function","text":"","category":"section"},{"location":"rule_author/superpowers/mutation_support.html","page":"Mutation Support (experimental)","title":"Mutation Support (experimental)","text":"It is relatively straight forward to write a frule for a mutating function. There are a few key points to follow:","category":"page"},{"location":"rule_author/superpowers/mutation_support.html","page":"Mutation Support (experimental)","title":"Mutation Support (experimental)","text":"There must be a mutable tangent input for every mutated primal input\nWhen the primal value is changed, the corresponding change must be made to its tangent partner\nWhen a value is returned, return its partnered tangent.\nIf (and only if) primal values alias, then their tangents must also alias.","category":"page"},{"location":"rule_author/superpowers/mutation_support.html#Example","page":"Mutation Support (experimental)","title":"Example","text":"","category":"section"},{"location":"rule_author/superpowers/mutation_support.html","page":"Mutation Support (experimental)","title":"Mutation Support (experimental)","text":"For example, consider the primal function with:","category":"page"},{"location":"rule_author/superpowers/mutation_support.html","page":"Mutation Support (experimental)","title":"Mutation Support (experimental)","text":"takes two Refs\ndoubles the first one in place\noverwrites the second one's value with the literal 5.0\nreturns the first one","category":"page"},{"location":"rule_author/superpowers/mutation_support.html","page":"Mutation Support (experimental)","title":"Mutation Support (experimental)","text":"function foo!(a::Base.RefValue, b::Base.RefValue)\n    a[] *= 2\n    b[] = 5.0\n    return a\nend","category":"page"},{"location":"rule_author/superpowers/mutation_support.html","page":"Mutation Support (experimental)","title":"Mutation Support (experimental)","text":"The frule for this would be:","category":"page"},{"location":"rule_author/superpowers/mutation_support.html","page":"Mutation Support (experimental)","title":"Mutation Support (experimental)","text":"function ChainRulesCore.frule((_, ȧ, ḃ), ::typeof(foo!), a::Base.RefValue, b::Base.RefValue)\n    @assert ȧ isa MutableTangent{typeof(a)}\n    @assert ḃ isa MutableTangent{typeof(b)}\n\n    a[] *= 2\n    ȧ.x *= 2  # `.x` is the field that lives behind RefValues\n\n    b[] = 5.0\n    ḃ.x = zero_tangent(5.0)  # or since we know that the zero for a Float64 is zero could write `ḃ.x = 0.0`\n\n    return a, ȧ\nend","category":"page"},{"location":"rule_author/superpowers/mutation_support.html","page":"Mutation Support (experimental)","title":"Mutation Support (experimental)","text":"Then assuming the AD system does its part to makes sure you are indeed given mutable values to mutate (i.e. those @assertions are true) then all is well and this rule will make mutation correct.","category":"page"},{"location":"rule_author/superpowers/mutation_support.html","page":"Mutation Support (experimental)","title":"Mutation Support (experimental)","text":"[1]: Further, it is hard to achieve this promise of allowing mutation to be supported without returning a structural tangent. Except in the special case of where the struct is not mutable and has no nested fields that are mutable.","category":"page"},{"location":"rule_author/tips_for_packages.html#Tips-for-making-your-package-work-with-AD","page":"Tips for making your package work with AD","title":"Tips for making your package work with AD","text":"","category":"section"},{"location":"rule_author/tips_for_packages.html#Ignoring-gradients-for-certain-expressions","page":"Tips for making your package work with AD","title":"Ignoring gradients for certain expressions","text":"","category":"section"},{"location":"rule_author/tips_for_packages.html","page":"Tips for making your package work with AD","title":"Tips for making your package work with AD","text":"There exists code that is not meant to be differentiated through, for example logging. In some cases, AD systems might work perfectly well with that code, but in others they might not. A convenience function ignore_derivatives is provided to get around this issue. It captures the functionality of both Zygote.ignore and Zygote.dropgrad.","category":"page"},{"location":"rule_author/tips_for_packages.html","page":"Tips for making your package work with AD","title":"Tips for making your package work with AD","text":"For example, Zygote does not support mutation, so it will break if you try to store intermediate values as in the following example:","category":"page"},{"location":"rule_author/tips_for_packages.html","page":"Tips for making your package work with AD","title":"Tips for making your package work with AD","text":"somes = []\nthings = []\n\nfunction loss(x, y)\n    some = f(x, y)\n    thing = g(x)\n    \n    # log\n    push!(somes, some)\n    push!(things, thing)\n\n    return some + thing\nend","category":"page"},{"location":"rule_author/tips_for_packages.html","page":"Tips for making your package work with AD","title":"Tips for making your package work with AD","text":"It is possible to get around this by using the ignore_derivatives function","category":"page"},{"location":"rule_author/tips_for_packages.html","page":"Tips for making your package work with AD","title":"Tips for making your package work with AD","text":"ignore_derivatives() do\n    push!(somes, some)\n    push!(things, thing)\nend","category":"page"},{"location":"rule_author/tips_for_packages.html","page":"Tips for making your package work with AD","title":"Tips for making your package work with AD","text":"or using a macro for one-liners","category":"page"},{"location":"rule_author/tips_for_packages.html","page":"Tips for making your package work with AD","title":"Tips for making your package work with AD","text":"@ignore_derivatives push!(things, thing)","category":"page"},{"location":"rule_author/tips_for_packages.html","page":"Tips for making your package work with AD","title":"Tips for making your package work with AD","text":"It is also possible to use this on individual objects, e.g.","category":"page"},{"location":"rule_author/tips_for_packages.html","page":"Tips for making your package work with AD","title":"Tips for making your package work with AD","text":"ignore_derivatives(a) + b","category":"page"},{"location":"rule_author/tips_for_packages.html","page":"Tips for making your package work with AD","title":"Tips for making your package work with AD","text":"will ignore the gradients for a only.","category":"page"},{"location":"rule_author/tips_for_packages.html","page":"Tips for making your package work with AD","title":"Tips for making your package work with AD","text":"Passing in instances of functors (callable structs), ignore_derivatives(functor), will make them behave like normal structs, i.e. propagate without being called and dropping their gradients. If you want to call a functor in the primal computation, wrap it in a closure: ignore_derivatives(() -> functor())","category":"page"},{"location":"rule_author/which_functions_need_rules.html#Which-functions-need-rules?","page":"Which functions need rules?","title":"Which functions need rules?","text":"","category":"section"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"In principle, a perfect AD system only needs rules for basic operations and can infer the rules for more complicated functions automatically. In practice, performance needs to be considered as well.","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"Some functions use ccall internally, for example ^. These functions cannot be differentiated through by AD systems, and need custom rules.","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"Other functions can in principle be differentiated through by an AD system, but there exists a mathematical insight that can dramatically improve the computation of the derivative. An example is numerical integration, where writing a rule implementing the fundamental theorem of calculus removes the need to perform AD through numerical integration.","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"Furthermore, AD systems make different trade-offs in performance due to their design. This means that a certain rule will help one AD system, but not improve (and also not harm) another. Below, we list some patterns relevant for the Zygote.jl AD system.","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"Rules for functions which mutate its arguments, e.g. sort!, should not be written at the moment. While technically they are supported, they would break Zygote.jl such that it would sometimes quietly return the wrong answer. This may be resolved in the future by allowing AD systems to opt-in or opt-out of certain types of rules.","category":"page"},{"location":"rule_author/which_functions_need_rules.html#Patterns-that-need-rules-in-[Zygote.jl](https://github.com/FluxML/Zygote.jl)","page":"Which functions need rules?","title":"Patterns that need rules in Zygote.jl","text":"","category":"section"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"There are a few classes of functions that Zygote cannot differentiate through. Custom rules will need to be written for these to make AD work.","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"Other patterns can be AD'ed through, but the backward pass performance can be greatly improved by writing a rule.","category":"page"},{"location":"rule_author/which_functions_need_rules.html#Functions-which-mutate-arrays","page":"Which functions need rules?","title":"Functions which mutate arrays","text":"","category":"section"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"For example,","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"function addone(a::AbstractArray)\n    b = similar(a)\n    b .= a .+ 1\n    return sum(b)\nend","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"complains that","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"julia> using Zygote\n\njulia> gradient(addone, a)\nERROR: Mutating arrays is not supported","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"However, upon adding the rrule (restart the REPL after calling gradient)","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"function ChainRules.rrule(::typeof(addone), a)\n    y = addone(a)\n    function addone_pullback(ȳ)\n        return NoTangent(), ones(length(a))\n    end\n    return y, addone_pullback\nend","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"the gradient can be evaluated:","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"julia> gradient(addone, a)\n([1.0, 1.0, 1.0],)","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"Notice that addone(a) mutates another array b internally, but not its input. This is commonly done in less trivial functions, and is often what Zygote's Mutating arrays is not supported error is telling you, even though you did not intend to mutate anything. Functions which mutate their own input are much more problematic. These are the ones named (by convention) with an exclamation mark, such as fill!(a, x) or push!(a, x). It is not possible to write rules which handle all uses of such a function correctly, on current Zygote.","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"note: Why restarting REPL after calling `gradient`?\nWhen gradient is called in Zygote for a function with no rrule defined, a backward pass for the function call is generated and cached. When gradient is called for the second time on the same function signature, the backward pass is reused without checking whether an an rrule has been defined between the two calls to gradient.If an rrule is defined before the first call to gradient it should register the rule and use it, but that prevents comparing what happens before and after the rrule is defined. To compare both versions with and without an rrule in the REPL simultaneously, define a function f(x) = <body> (no rrule), another function f_cr(x) = f(x), and an rrule for f_cr.Calling Zygote.refresh() will often have the same effect as restarting the REPL.","category":"page"},{"location":"rule_author/which_functions_need_rules.html#Exception-handling","page":"Which functions need rules?","title":"Exception handling","text":"","category":"section"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"Zygote does not support differentiating through try/catch statements. For example, differentiating through","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"function exception(x)\n    try\n        return x^2\n    catch e\n        println(\"could not square input\")\n        throw(e)\n    end\nend","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"does not work","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"julia> gradient(exception, 3.0)\nERROR: Compiling Tuple{typeof(exception),Int64}: try/catch is not supported.","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"without an rrule defined (restart the REPL after calling gradient)","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"function ChainRulesCore.rrule(::typeof(exception), x)\n    y = exception(x)\n    function exception_pullback(ȳ)\n        return NoTangent(), 2*x\n    end\n    return y, exception_pullback\nend","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"julia> gradient(exception, 3.0)\n(6.0,)","category":"page"},{"location":"rule_author/which_functions_need_rules.html#Loops","page":"Which functions need rules?","title":"Loops","text":"","category":"section"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"Julia runs loops fast. Unfortunately Zygote differentiates through loops slowly. So, for example, computing the mean squared error by using a loop","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"function mse(y, ŷ)\n    N = length(y)\n    s = 0.0\n    for i in 1:N\n        s +=  (y[i] - ŷ[i])^2.0\n    end\n    return s/N\nend","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"takes a lot longer to AD through","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"julia> y = rand(30);\n\njulia> ŷ = rand(30);\n\njulia> @btime gradient(mse, $y, $ŷ)\n  38.180 μs (993 allocations: 65.00 KiB)","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"than if we supply an rrule, (restart the REPL after calling gradient)","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"function ChainRules.rrule(::typeof(mse), x, x̂)\n    output = mse(x, x̂)\n    function mse_pullback(ȳ)\n        N = length(x)\n        g = (2 ./ N) .* (x .- x̂) .* ȳ\n        return NoTangent(), g, -g\n    end\n    return output, mse_pullback\nend","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"which is much faster","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"julia> @btime gradient(mse, $y, $ŷ)\n  143.697 ns (2 allocations: 672 bytes)","category":"page"},{"location":"rule_author/which_functions_need_rules.html#In-place-accumulation","page":"Which functions need rules?","title":"In-place accumulation","text":"","category":"section"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"In-place accumulation of gradients is slow in Zygote. The issue, demonstrated in the following example, is that the gradient of getindex allocates an array of zeros with a single non-zero element. ","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"function sum3(array)\n    x = array[1]\n    y = array[2]\n    z = array[3]\n    return x+y+z\nend","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"julia> @btime gradient(sum3, rand(30))\n  424.510 ns (9 allocations: 2.06 KiB)","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"Computing the gradient with only a single array allocation using an rrule (restart the REPL after calling gradient)","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"function ChainRulesCore.rrule(::typeof(sum3), a)\n    y = sum3(a)\n    function sum3_pullback(ȳ)\n        grad = zeros(length(a))\n        grad[1:3] .+= ȳ\n        return NoTangent(), grad\n    end\n    return y, sum3_pullback\nend","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"turns out to be significantly faster ","category":"page"},{"location":"rule_author/which_functions_need_rules.html","page":"Which functions need rules?","title":"Which functions need rules?","text":"julia> @btime gradient(sum3, rand(30))\n  192.818 ns (3 allocations: 784 bytes)","category":"page"},{"location":"api.html#API-Documentation","page":"API","title":"API Documentation","text":"","category":"section"},{"location":"api.html#Rules","page":"API","title":"Rules","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Modules = [ChainRulesCore]\nPages = [\"rules.jl\"]\nPrivate = false","category":"page"},{"location":"api.html#ChainRulesCore.frule-Tuple{Any, Any, Vararg{Any, N} where N}","page":"API","title":"ChainRulesCore.frule","text":"frule([::RuleConfig,] (Δf, Δx...), f, x...)\n\nExpressing the output of f(x...) as Ω, return the tuple:\n\n(Ω, ΔΩ)\n\nThe second return value is the tangent w.r.t. the output.\n\nIf no method matching frule((Δf, Δx...), f, x...) has been defined, then return nothing.\n\nExamples:\n\nunary input, unary output scalar function:\n\njulia> dself = NoTangent();\n\njulia> x = rand()\n0.8236475079774124\n\njulia> sinx, Δsinx = frule((dself, 1), sin, x)\n(0.7336293678134624, 0.6795498147167869)\n\njulia> sinx == sin(x)\ntrue\n\njulia> Δsinx == cos(x)\ntrue\n\nUnary input, binary output scalar function:\n\njulia> sincosx, Δsincosx = frule((dself, 1), sincos, x);\n\njulia> sincosx == sincos(x)\ntrue\n\njulia> Δsincosx[1] == cos(x)\ntrue\n\njulia> Δsincosx[2] == -sin(x)\ntrue\n\nNote that techically speaking julia does not have multiple output functions, just functions that return a single output that is iterable, like a Tuple. So this is actually a Tangent:\n\njulia> Δsincosx\nTangent{Tuple{Float64, Float64}}(0.6795498147167869, -0.7336293678134624)\n\nThe optional RuleConfig option allows specifying frules only for AD systems that support given features. If not needed, then it can be omitted and the frule without it will be hit as a fallback. This is the case for most rules.\n\nSee also: rrule, @scalar_rule, RuleConfig\n\n\n\n\n\n","category":"method"},{"location":"api.html#ChainRulesCore.rrule-Tuple{Any, Vararg{Any, N} where N}","page":"API","title":"ChainRulesCore.rrule","text":"rrule([::RuleConfig,] f, x...)\n\nExpressing x as the tuple (x₁, x₂, ...) and the output tuple of f(x...) as Ω, return the tuple:\n\n(Ω, (Ω̄₁, Ω̄₂, ...) -> (s̄elf, x̄₁, x̄₂, ...))\n\nWhere the second return value is the the propagation rule or pullback. It takes in cotangents corresponding to the outputs (x̄₁, x̄₂, ...), and s̄elf, the internal values of the function itself (for closures)\n\nIf no method matching rrule(f, xs...) has been defined, then return nothing.\n\nExamples:\n\nunary input, unary output scalar function:\n\njulia> x = rand();\n\njulia> sinx, sin_pullback = rrule(sin, x);\n\njulia> sinx == sin(x)\ntrue\n\njulia> sin_pullback(1) == (NoTangent(), cos(x))\ntrue\n\nbinary input, unary output scalar function:\n\njulia> x, y = rand(2);\n\njulia> hypotxy, hypot_pullback = rrule(hypot, x, y);\n\njulia> hypotxy == hypot(x, y)\ntrue\n\njulia> hypot_pullback(1) == (NoTangent(), (x / hypot(x, y)), (y / hypot(x, y)))\ntrue\n\nThe optional RuleConfig option allows specifying rrules only for AD systems that support given features. If not needed, then it can be omitted and the rrule without it will be hit as a fallback. This is the case for most rules.\n\nSee also: frule, @scalar_rule, RuleConfig\n\n\n\n\n\n","category":"method"},{"location":"api.html#Rule-Definition-Tools","page":"API","title":"Rule Definition Tools","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Modules = [ChainRulesCore]\nPages = [\"rule_definition_tools.jl\"]\nPrivate = false","category":"page"},{"location":"api.html#ChainRulesCore.@non_differentiable-Tuple{Any}","page":"API","title":"ChainRulesCore.@non_differentiable","text":"@non_differentiable(signature_expression)\n\nA helper to make it easier to declare that a method is not differentiable. This is a short-hand for defining an frule and rrule that return NoTangent() for all partials (even for the function s̄elf-partial itself)\n\nKeyword arguments should not be included.\n\njulia> @non_differentiable Base.:(==)(a, b)\n\njulia> _, pullback = rrule(==, 2.0, 3.0);\n\njulia> pullback(1.0)\n(NoTangent(), NoTangent(), NoTangent())\n\nYou can place type-constraints in the signature:\n\njulia> @non_differentiable Base.length(xs::Union{Number, Array})\n\njulia> frule((ZeroTangent(), 1), length, [2.0, 3.0])\n(2, NoTangent())\n\nwarning: Warning\nThis helper macro covers only the simple common cases. It does not support where-clauses. For these you can declare the rrule and frule directly\n\n\n\n\n\n","category":"macro"},{"location":"api.html#ChainRulesCore.@opt_out-Tuple{Any}","page":"API","title":"ChainRulesCore.@opt_out","text":"@opt_out frule([config], _, f, args...)\n@opt_out rrule([config], f, args...)\n\nThis allows you to opt-out of an frule or an rrule by providing a more specific method, that says to use the AD system to differentiate it.\n\nFor example, consider some function foo(x::AbtractArray). In general, you know an efficient and generic way to implement its rrule. You do so, (likely making use of ProjectTo). But it actually turns out that for some FancyArray type it is better to let the AD do its thing.\n\nThen you would write something like:\n\nfunction rrule(::typeof(foo), x::AbstractArray)\n    foo_pullback(ȳ) = ...\n    return foo(x), foo_pullback\nend\n\n@opt_out rrule(::typeof(foo), ::FancyArray)\n\nThis will generate an rrule that returns nothing, and will also add a similar entry to ChainRulesCore.no_rrule.\n\nSimilar applies for frule and ChainRulesCore.no_frule\n\nFor more information see the documentation on opting out of rules.\n\n\n\n\n\n","category":"macro"},{"location":"api.html#ChainRulesCore.@scalar_rule-Tuple{Any, Any, Vararg{Any, N} where N}","page":"API","title":"ChainRulesCore.@scalar_rule","text":"@scalar_rule(f(x₁, x₂, ...),\n             @setup(statement₁, statement₂, ...),\n             (∂f₁_∂x₁, ∂f₁_∂x₂, ...),\n             (∂f₂_∂x₁, ∂f₂_∂x₂, ...),\n             ...)\n\nA convenience macro that generates simple scalar forward or reverse rules using the provided partial derivatives. Specifically, generates the corresponding methods for frule and rrule:\n\nfunction ChainRulesCore.frule((NoTangent(), Δx₁, Δx₂, ...), ::typeof(f), x₁::Number, x₂::Number, ...)\n    Ω = f(x₁, x₂, ...)\n    $(statement₁, statement₂, ...)\n    return Ω, (\n            (∂f₁_∂x₁ * Δx₁ + ∂f₁_∂x₂ * Δx₂ + ...),\n            (∂f₂_∂x₁ * Δx₁ + ∂f₂_∂x₂ * Δx₂ + ...),\n            ...\n        )\nend\n\nfunction ChainRulesCore.rrule(::typeof(f), x₁::Number, x₂::Number, ...)\n    Ω = f(x₁, x₂, ...)\n    $(statement₁, statement₂, ...)\n    return Ω, ((ΔΩ₁, ΔΩ₂, ...)) -> (\n            NoTangent(),\n            ∂f₁_∂x₁ * ΔΩ₁ + ∂f₂_∂x₁ * ΔΩ₂ + ...),\n            ∂f₁_∂x₂ * ΔΩ₁ + ∂f₂_∂x₂ * ΔΩ₂ + ...),\n            ...\n        )\nend\n\nIf no type constraints in f(x₁, x₂, ...) within the call to @scalar_rule are provided, each parameter in the resulting frule/rrule definition is given a type constraint of Number. Constraints may also be explicitly be provided to override the Number constraint, e.g. f(x₁::Complex, x₂), which will constrain x₁ to Complex and x₂ to Number.\n\nAt present this does not support defining for closures/functors. Thus in reverse-mode, the first returned partial, representing the derivative with respect to the function itself, is always NoTangent(). And in forward-mode, the first input to the returned propagator is always ignored.\n\nThe result of f(x₁, x₂, ...) is automatically bound to Ω. This allows the primal result to be conveniently referenced (as Ω) within the derivative/setup expressions.\n\nThis macro assumes complex functions are holomorphic. In general, for non-holomorphic functions, the frule and rrule must be defined manually.\n\nIf the derivative is one, (e.g. for identity functions) true can be used as the most general multiplicative identity.\n\nThe @setup argument can be elided if no setup code is need. In other words:\n\n@scalar_rule(f(x₁, x₂, ...),\n             (∂f₁_∂x₁, ∂f₁_∂x₂, ...),\n             (∂f₂_∂x₁, ∂f₂_∂x₂, ...),\n             ...)\n\nis equivalent to:\n\n@scalar_rule(f(x₁, x₂, ...),\n             @setup(nothing),\n             (∂f₁_∂x₁, ∂f₁_∂x₂, ...),\n             (∂f₂_∂x₁, ∂f₂_∂x₂, ...),\n             ...)\n\nFor examples, see ChainRules' rulesets directory.\n\nSee also: frule, rrule.\n\n\n\n\n\n","category":"macro"},{"location":"api.html#Tangent-Types","page":"API","title":"Tangent Types","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Modules = [ChainRulesCore]\nPages = [\n    \"tangent_types/abstract_zero.jl\",\n    \"tangent_types/one.jl\",\n    \"tangent_types/structural_tangent.jl\",\n    \"tangent_types/thunks.jl\",\n    \"tangent_types/abstract_tangent.jl\",\n    \"tangent_types/notimplemented.jl\",\n]\nPrivate = false","category":"page"},{"location":"api.html#ChainRulesCore.AbstractZero","page":"API","title":"ChainRulesCore.AbstractZero","text":"AbstractZero <: AbstractTangent\n\nSupertype for zero-like tangents—i.e., tangents that act like zero when added or multiplied to other values. If an AD system encounters a propagator that takes as input only subtypes of AbstractZero, then it can stop performing AD operations. All propagators are linear functions, and thus the final result will be zero.\n\nAll AbstractZero subtypes are singleton types. There are two of them: ZeroTangent() and NoTangent().\n\n\n\n\n\n","category":"type"},{"location":"api.html#ChainRulesCore.NoTangent","page":"API","title":"ChainRulesCore.NoTangent","text":"NoTangent() <: AbstractZero\n\nThis tangent indicates that the derivative does not exist. It is the tangent type for primal types that are not differentiable, such as integers or booleans (when they are not being used to represent floating-point values). The only valid way to perturb such values is to not change them at all. As a consequence, NoTangent is functionally identical to ZeroTangent(), but it provides additional semantic information.\n\nAdding NoTangent() to a primal is generally wrong: gradient-based methods cannot be used to optimize over discrete variables. An optimization package making use of this might want to check for such a case.\n\nnote: Note\nThis does not indicate that the derivative is not implemented, but rather that mathematically it is not defined.\n\nThis mostly shows up as the derivative with respect to dimension, index, or size arguments.\n\nfunction rrule(fill, x, len::Int)\n    y = fill(x, len)\n    fill_pullback(ȳ) = (NoTangent(), @thunk(sum(Ȳ)), NoTangent())\n    return y, fill_pullback\nend\n\n\n\n\n\n","category":"type"},{"location":"api.html#ChainRulesCore.ZeroTangent","page":"API","title":"ChainRulesCore.ZeroTangent","text":"ZeroTangent() <: AbstractZero\n\nThe additive identity for tangents. This is basically the same as 0. A derivative of ZeroTangent() does not propagate through the primal function.\n\n\n\n\n\n","category":"type"},{"location":"api.html#ChainRulesCore.zero_tangent","page":"API","title":"ChainRulesCore.zero_tangent","text":"zero_tangent(primal)\n\nThis returns an appropriate zero tangent suitable for accumulating tangents of the primal. For mutable composites types this is a structural MutableTangent For Arrays, it is applied recursively for each element. For other types, in particular immutable types, we do not make promises beyond that it will be iszero and suitable for accumulating against. For types without a tangent space (e.g. singleton structs) this returns NoTangent(). In general, it is more likely to produce a structural tangent.\n\nwarning: Exprimental\nzero_tangentis an experimental feature, and is part of the mutation support featureset. While this notice remains it may have changes in behavour, and interface in any minor version of ChainRulesCore. Exactly how it should be used (e.g. is it forward-mode only?)\n\n\n\n\n\n","category":"function"},{"location":"api.html#ChainRulesCore.MutableTangent","page":"API","title":"ChainRulesCore.MutableTangent","text":"MutableTangent{P}(fields) <: StructuralTangent{P} <: AbstractTangent\n\nThis type represents the tangent to a mutable struct. It itself is also mutable.\n\nwarning: Exprimental\nMutableTangent is an experimental feature, and is part of the mutation support featureset. While this notice remains it may have changes in behavour, and interface in any minor version of ChainRulesCore. Exactly how it should be used (e.g. is it forward-mode only?)\n\nwarning: Do not directly mess with the tangent backing data\nIt is relatively straight forward for a forwards-mode AD to work correctly in the presence of mutation and aliasing of primal values. However, this requires that the tangent is aliased in turn and conversely that it is copied when the primal is). If you seperately alias the backing data, etc by using the internal ChainRulesCore.backing function you can break this.\n\n\n\n\n\n","category":"type"},{"location":"api.html#ChainRulesCore.StructuralTangent","page":"API","title":"ChainRulesCore.StructuralTangent","text":"StructuralTangent{P} <: AbstractTangent\n\nRepresenting the type of the tangent of a struct P (or a Tuple/NamedTuple). as an object with mirroring fields.\n\nwarning: Exprimental\nStructuralTangent is an experimental feature, and is part of the mutation support featureset. The StructuralTangent constructor returns a MutableTangent for mutable structs. MutableTangent is an experimental feature. Thus use of StructuralTangent (rather than Tangent directly) is also experimental. While this notice remains it may have changes in behavour, and interface in any minor version of ChainRulesCore.\n\n\n\n\n\n","category":"type"},{"location":"api.html#ChainRulesCore.Tangent","page":"API","title":"ChainRulesCore.Tangent","text":"Tangent{P, T} <: StructuralTangent{P} <: AbstractTangent\n\nThis type represents the tangent for a struct/NamedTuple, or Tuple. P is the the corresponding primal type that this is a tangent for.\n\nTangent{P} should have fields (technically properties), that match to a subset of the fields of the primal type; and each should be a tangent type matching to the primal type of that field. Fields of the P that are not present in the Tangent are treated as Zero.\n\nT is an implementation detail representing the backing data structure. For Tuple it will be a Tuple, and for everything else it will be a NamedTuple. It should not be passed in by user.\n\nFor Tangents of Tuples, iterate and getindex are overloaded to behave similarly to for a tuple. For Tangents of structs, getproperty is overloaded to allow for accessing values via tangent.fieldname. Any fields not explictly present in the Tangent are treated as being set to ZeroTangent(). To make a Tangent have all the fields of the primal the canonicalize function is provided.\n\n\n\n\n\n","category":"type"},{"location":"api.html#ChainRulesCore.canonicalize-Union{Tuple{Tangent{P, var\"#s9\"} where var\"#s9\"<:(NamedTuple{L, T} where T<:Tuple)}, Tuple{L}, Tuple{P}} where {P, L}","page":"API","title":"ChainRulesCore.canonicalize","text":"canonicalize(tangent::Tangent{P}) -> Tangent{P}\n\nReturn the canonical Tangent for the primal type P. The property names of the returned Tangent match the field names of the primal, and all fields of P not present in the input tangent are explictly set to ZeroTangent().\n\n\n\n\n\n","category":"method"},{"location":"api.html#ChainRulesCore.InplaceableThunk","page":"API","title":"ChainRulesCore.InplaceableThunk","text":"InplaceableThunk(add!::Function, val::Thunk)\n\nA wrapper for a Thunk, that allows it to define an inplace add! function.\n\nadd! should be defined such that: ithunk.add!(Δ) = Δ .+= ithunk.val but it should do this more efficently than simply doing this directly. (Otherwise one can just use a normal Thunk).\n\nMost operations on an InplaceableThunk treat it just like a normal Thunk; and destroy its inplacability.\n\n\n\n\n\n","category":"type"},{"location":"api.html#ChainRulesCore.Thunk","page":"API","title":"ChainRulesCore.Thunk","text":"Thunk(()->v)\n\nA thunk is a deferred computation. It wraps a zero argument closure that when invoked returns a tangent. @thunk(v) is a macro that expands into Thunk(()->v).\n\nTo evaluate the wrapped closure, call unthunk which is a no-op when the argument is not a Thunk.\n\njulia> t = @thunk(3)\nThunk(var\"#4#5\"())\n\njulia> unthunk(t)\n3\n\nWhen to @thunk?\n\nWhen writing rrules (and to a lesser exent frules), it is important to @thunk appropriately. Propagation rules that return multiple derivatives may not have all deriviatives used.  By @thunking the work required for each derivative, they then compute only what is needed.\n\nHow do thunks prevent work?\n\nIf we have res = pullback(...) = @thunk(f(x)), @thunk(g(x)) then if we did dx + res[1] then only f(x) would be evaluated, not g(x). Also if we did ZeroTangent() * res[1] then the result would be ZeroTangent() and f(x) would not be evaluated.\n\nSo why not thunk everything?\n\n@thunk creates a closure over the expression, which (effectively) creates a struct with a field for each variable used in the expression, and call overloaded.\n\nDo not use @thunk if this would be equal or more work than actually evaluating the expression itself. This is commonly the case for scalar operators.\n\nFor more details see the manual section on using thunks effectively.\n\n\n\n\n\n","category":"type"},{"location":"api.html#ChainRulesCore.unthunk-Tuple{Any}","page":"API","title":"ChainRulesCore.unthunk","text":"unthunk(x)\n\nOn AbstractThunks this removes 1 layer of thunking. On any other type, it is the identity operation.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ChainRulesCore.@thunk-Tuple{Any}","page":"API","title":"ChainRulesCore.@thunk","text":"@thunk expr\n\nDefine a Thunk wrapping the expr, to lazily defer its evaluation.\n\n\n\n\n\n","category":"macro"},{"location":"api.html#ChainRulesCore.@not_implemented-Tuple{Any}","page":"API","title":"ChainRulesCore.@not_implemented","text":"@not_implemented(info)\n\nCreate a tangent that indicates that the derivative is not implemented.\n\nThe info should be useful information about the missing tangent for debugging.\n\nnote: Note\nThis macro should be used only if the automatic differentiation would error otherwise. It is mostly useful if the function has multiple inputs or outputs, and one has worked out analytically and implemented some but not all tangents.\n\nnote: Note\nIt is good practice to include a link to a GitHub issue about the missing tangent in the debugging information.\n\n\n\n\n\n","category":"macro"},{"location":"api.html#Accumulation","page":"API","title":"Accumulation","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"add!!\nChainRulesCore.is_inplaceable_destination","category":"page"},{"location":"api.html#ChainRulesCore.add!!","page":"API","title":"ChainRulesCore.add!!","text":"add!!(x, y)\n\nReturns x+y, potentially mutating x in-place to hold this value. This avoids allocations when x can be mutated in this way.\n\n\n\n\n\nadd!!(x, t::InplacableThunk)\n\nThe specialization of add!! for InplaceableThunk promises to only call t.add! on x if x is suitably mutable; otherwise it will be out of place.\n\n\n\n\n\n","category":"function"},{"location":"api.html#ChainRulesCore.is_inplaceable_destination","page":"API","title":"ChainRulesCore.is_inplaceable_destination","text":"is_inplaceable_destination(x) -> Bool\n\nReturns true if x is suitable for for storing inplace accumulation of gradients. For arrays this means x .= y will mutate x, if y is an appropriate tangent.\n\nHere \"appropriate\" means that y cannot be complex unless x is too, and that for structured matrices like x isa Diagonal, y shares this structure.\n\nnote: history\nWrapper array types should overload this function if they can be written into. Before ChainRulesCore 1.16, it would guess true for most wrappers based on parent, but this is not safe, e.g. it will lead to an error with ReadOnlyArrays.jl. \n\nThere must always be a correct non-mutating path, so in uncertain cases, this function returns false.\n\n\n\n\n\n","category":"function"},{"location":"api.html#RuleConfig","page":"API","title":"RuleConfig","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Modules = [ChainRulesCore]\nPages = [\"config.jl\"]\nPrivate = false","category":"page"},{"location":"api.html#ChainRulesCore.HasForwardsMode","page":"API","title":"ChainRulesCore.HasForwardsMode","text":"HasForwardsMode <: ForwardsModeCapability\n\nThis trait indicates that a RuleConfig{>:HasForwardsMode} can perform forward mode AD. If it is set then frule_via_ad must be implemented.\n\n\n\n\n\n","category":"type"},{"location":"api.html#ChainRulesCore.HasReverseMode","page":"API","title":"ChainRulesCore.HasReverseMode","text":"HasReverseMode <: ReverseModeCapability\n\nThis trait indicates that a RuleConfig{>:HasReverseMode} can perform reverse mode AD. If it is set then rrule_via_ad must be implemented.\n\n\n\n\n\n","category":"type"},{"location":"api.html#ChainRulesCore.NoForwardsMode","page":"API","title":"ChainRulesCore.NoForwardsMode","text":"NoForwardsMode <: ForwardsModeCapability\n\nThis is the complement to HasForwardsMode. To avoid ambiguities [RuleConfig]s that do not support performing forwards mode AD should be RuleConfig{>:NoForwardsMode}.\n\n\n\n\n\n","category":"type"},{"location":"api.html#ChainRulesCore.NoReverseMode","page":"API","title":"ChainRulesCore.NoReverseMode","text":"NoReverseMode <: ReverseModeCapability\n\nThis is the complement to HasReverseMode. To avoid ambiguities [RuleConfig]s that do not support performing reverse mode AD should be RuleConfig{>:NoReverseMode}.\n\n\n\n\n\n","category":"type"},{"location":"api.html#ChainRulesCore.RuleConfig","page":"API","title":"ChainRulesCore.RuleConfig","text":"RuleConfig{T}\n\nThe configuration for what rules to use. T: traits. This should be a Union of all special traits needed for rules to be allowed to be defined for your AD. If nothing special this should be set to Union{}.\n\nAD authors should define a subtype of RuleConfig to use when calling frule/rrule.\n\nRule authors can dispatch on this config when defining rules. For example:\n\n# only define rrule for `pop!` on AD systems where mutation is supported.\nrrule(::RuleConfig{>:SupportsMutation}, typeof(pop!), ::Vector) = ...\n\n# this definition of map is for any AD that defines a forwards mode\nrrule(conf::RuleConfig{>:HasForwardsMode}, typeof(map), ::Vector) = ...\n\n# this definition of map is for any AD that only defines a reverse mode.\n# It is not as good as the rrule that can be used if the AD defines a forward-mode as well.\nrrule(conf::RuleConfig{>:Union{NoForwardsMode, HasReverseMode}}, typeof(map), ::Vector) = ...\n\nFor more details see rule configurations and calling back into AD.\n\n\n\n\n\n","category":"type"},{"location":"api.html#ChainRulesCore.frule_via_ad","page":"API","title":"ChainRulesCore.frule_via_ad","text":"frule_via_ad(::RuleConfig{>:HasForwardsMode}, ȧrgs, f, args...; kwargs...)\n\nThis function has the same API as frule, but operates via performing forwards mode automatic differentiation. Any RuleConfig subtype that supports the HasForwardsMode special feature must provide an implementation of it.\n\nSee also: rrule_via_ad, RuleConfig and the documentation on rule configurations and calling back into AD\n\n\n\n\n\n","category":"function"},{"location":"api.html#ChainRulesCore.rrule_via_ad","page":"API","title":"ChainRulesCore.rrule_via_ad","text":"rrule_via_ad(::RuleConfig{>:HasReverseMode}, f, args...; kwargs...)\n\nThis function has the same API as rrule, but operates via performing reverse mode automatic differentiation. Any RuleConfig subtype that supports the HasReverseMode special feature must provide an implementation of it.\n\nSee also: frule_via_ad, RuleConfig and the documentation on rule configurations and calling back into AD\n\n\n\n\n\n","category":"function"},{"location":"api.html#ProjectTo","page":"API","title":"ProjectTo","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"ProjectTo","category":"page"},{"location":"api.html#ChainRulesCore.ProjectTo","page":"API","title":"ChainRulesCore.ProjectTo","text":"(p::ProjectTo{T})(dx)\n\nProjects the tangent dx onto a specific tangent space.\n\nThe type T is meant to encode the largest acceptable space, so usually this enforces p(dx)::T. But some subspaces which aren't subtypes of T may be allowed, and in particular dx::AbstractZero always passes through.\n\nUsually T is the \"outermost\" part of the type, and p stores additional properties such as projectors for each constituent field. Arrays have either one projector p.element expressing the element type for an array of numbers, or else an array of projectors p.elements. These properties can be supplied as keyword arguments on construction, p = ProjectTo{T}(; field=data, element=Projector(x)). For each T in use, corresponding methods should be written for ProjectTo{T}(dx) with nonzero dx.\n\nWhen called on dx::Thunk, the projection is inserted into the thunk.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Ignoring-gradients","page":"API","title":"Ignoring gradients","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"ignore_derivatives\n@ignore_derivatives","category":"page"},{"location":"api.html#ChainRulesCore.ignore_derivatives","page":"API","title":"ChainRulesCore.ignore_derivatives","text":"ignore_derivatives(f::Function)\n\nTells the AD system to ignore the gradients of the wrapped closure. The primal computation (forward pass) is executed normally.\n\nignore_derivatives() do\n    value = rand()\n    push!(collection, value)\nend\n\nUsing this incorrectly could lead to incorrect gradients. For example, the following function will have zero gradients with respect to its argument:\n\nfunction wrong_grads(x)\n    y = ones(3)\n    ignore_derivatives() do\n        push!(y, x)\n    end\n    return sum(y)\nend\n\n\n\n\n\nignore_derivatives(x)\n\nTells the AD system to ignore the gradients of the argument. Can be used to avoid unnecessary computation of gradients.\n\nignore_derivatives(x) * w\n\n\n\n\n\n","category":"function"},{"location":"api.html#ChainRulesCore.@ignore_derivatives","page":"API","title":"ChainRulesCore.@ignore_derivatives","text":"@ignore_derivatives (...)\n\nTells the AD system to ignore the expression. Equivalent to ignore_derivatives() do (...) end.\n\n\n\n\n\n","category":"macro"},{"location":"api.html#Internal","page":"API","title":"Internal","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"ChainRulesCore.AbstractTangent\nChainRulesCore.debug_mode\nChainRulesCore.no_rrule\nChainRulesCore.no_frule","category":"page"},{"location":"api.html#ChainRulesCore.AbstractTangent","page":"API","title":"ChainRulesCore.AbstractTangent","text":"AbstractTangent\n\nThe subtypes of AbstractTangent define a custom \"algebra\" for chain rule evaluation that attempts to factor various features like complex derivative support, broadcast fusion, zero-elision, etc. into nicely separated parts.\n\nIn general a tangent type is the type of a derivative of a value. The type of the value is for contrast called the primal type. Differential types correspond to primal types, although the relation is not one-to-one. Subtypes of  AbstractTangent are not the only tangent types. In fact for the most common primal types, such as Real or AbstractArray{Real} the the tangent type is the same as the primal type.\n\nIn a circular definition: the most important property of a tangent is that it should be able to be added (by defining +) to another tangent of the same primal type. That allows for gradients to be accumulated.\n\nIt generally also should be able to be added to a primal to give back another primal, as this facilitates gradient descent.\n\nAll subtypes of AbstractTangent implement the following operations:\n\n+(a, b): linearly combine tangent a and tangent b\n*(a, b): multiply the tangent b by the scaling factor a\nBase.zero(x) = ZeroTangent(): a zero.\n\nFurther, they often implement other linear operators, such as conj, adjoint, dot. Pullbacks/pushforwards are linear operators, and their inputs are often AbstractTangent subtypes. Pullbacks/pushforwards in-turn call other linear operators on those inputs. Thus it is desirable to have all common linear operators work on AbstractTangents.\n\n\n\n\n\n","category":"type"},{"location":"api.html#ChainRulesCore.debug_mode","page":"API","title":"ChainRulesCore.debug_mode","text":"debug_mode() -> Bool\n\nDetermines if ChainRulesCore is in debug_mode. Defaults to false, but if the user redefines it to return true then extra information will be shown when errors occur.\n\nEnable via:\n\nChainRulesCore.debug_mode() = true\n\n\n\n\n\n","category":"function"},{"location":"api.html#ChainRulesCore.no_rrule","page":"API","title":"ChainRulesCore.no_rrule","text":"no_rrule\n\nThis is an piece of infastructure supporting opting out of rrule. It follows the signature for rrule exactly. A collection of type-tuples is stored in its method-table. If something has this defined, it means that it must having a must also have a rrule,  defined that returns nothing.\n\nwarning: Do not overload no_rrule directly\nIt is fine and intended to query the method table of no_rrule. It is not safe to add to that directly, as corresponding changes also need to be made to rrule. The @opt_out macro does both these things, and so should almost always be used rather than defining a method of no_rrule directly.\n\nMechanics\n\nnote: when the text below says methods == it actually means: parameters(m.sig)[2:end] (i.e. the signature type tuple) rather than the method object m itself.\n\nTo decide if should opt-out using this mechanism.\n\nfind the most specific method of rrule and no_rule e.g with Base.which\nif the method of no_rrule == the method of rrule, then should opt-out\n\nTo just ignore the fact that rules can be opted-out from, and that some rules thus return nothing, then filter the list of methods of rrule to remove those that are == to ones that occur in the method table of no_rrule.\n\nNote also when doing this you must still also handle falling back from rule with config, to rule without config.\n\nOn the other-hand if your AD can work with rrules that return nothing, then it is simpler to just use that mechanism for opting out; and you don't need to worry about this at all.\n\nFor more information see the documentation on opting out of rules\n\nSee also ChainRulesCore.no_frule.\n\n\n\n\n\n","category":"function"},{"location":"api.html#ChainRulesCore.no_frule","page":"API","title":"ChainRulesCore.no_frule","text":"no_frule\n\nThis is an piece of infastructure supporting opting out of frule. It follows the signature for frule exactly. A collection of type-tuples is stored in its method-table. If something has this defined, it means that it must having a must also have a frule,  defined that returns nothing.\n\nwarning: Do not overload no_frule directly\nIt is fine and intended to query the method table of no_frule. It is not safe to add to that directly, as corresponding changes also need to be made to frule. The @opt_out macro does both these things, and so should almost always be used rather than defining a method of no_frule directly.\n\nMechanics\n\nnote: when the text below says methods == it actually means: parameters(m.sig)[2:end] (i.e. the signature type tuple) rather than the method object m itself.\n\nTo decide if should opt-out using this mechanism.\n\nfind the most specific method of frule and no_rule e.g with Base.which\nif the method of no_frule == the method of frule, then should opt-out\n\nTo just ignore the fact that rules can be opted-out from, and that some rules thus return nothing, then filter the list of methods of frule to remove those that are == to ones that occur in the method table of no_frule.\n\nNote also when doing this you must still also handle falling back from rule with config, to rule without config.\n\nOn the other-hand if your AD can work with frules that return nothing, then it is simpler to just use that mechanism for opting out; and you don't need to worry about this at all.\n\nFor more information see the documentation on opting out of rules\n\nSee also ChainRulesCore.no_rrule.\n\n\n\n\n\n","category":"function"},{"location":"rule_author/writing_good_rules.html#On-writing-good-rrule-/-frule-methods","page":"Writing good rules","title":"On writing good rrule / frule methods","text":"","category":"section"},{"location":"rule_author/writing_good_rules.html#Code-Style","page":"Writing good rules","title":"Code Style","text":"","category":"section"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"Use named local functions for the pullback in an rrule.","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"# good:\nfunction rrule(::typeof(foo), x)\n    Y = foo(x)\n    function foo_pullback(Ȳ)\n        return NoTangent(), bar(Ȳ)\n    end\n    return Y, foo_pullback\nend\n#== output\njulia> rrule(foo, 2)\n(4, var\"#foo_pullback#11\"())\n==#\n\n# bad:\nfunction rrule(::typeof(foo), x)\n    return foo(x), x̄ -> (NoTangent(), bar(x̄))\nend\n#== output:\njulia> rrule(foo, 2)\n(4, var\"##9#10\"())\n==#","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"While this is more verbose, it ensures that if an error is thrown during the pullback the gensym name of the local function will include the name you gave it. This makes it a lot simpler to debug from the stacktrace.","category":"page"},{"location":"rule_author/writing_good_rules.html#Use-ZeroTangent()-as-the-return-value","page":"Writing good rules","title":"Use ZeroTangent() as the return value","text":"","category":"section"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"The ZeroTangent() object exists as an alternative to directly returning 0 or zeros(n). It allows more optimal computation when chaining pullbacks/pushforwards, to avoid work. They should be used where possible.","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"However, sometimes for performance reasons this is not ideal. Especially, if it is to replace a scalar, and is in a type-unstable way. It causes problems if mapping over such pullbacks/pushforwards. This would be solved once JuliaLang/julia#38241 has been addressed.","category":"page"},{"location":"rule_author/writing_good_rules.html#Use-Thunks-appropriately","page":"Writing good rules","title":"Use Thunks appropriately","text":"","category":"section"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"If work is only required for one of the returned tangents, then it should be wrapped in a @thunk (potentially using a begin-end block).","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"If there are multiple return values, their computation should almost always be wrapped in a @thunk.","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"Do not wrap variables in a @thunk; wrap the computations that fill those variables in @thunk:","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"# good:\n∂A = @thunk(foo(x))\nreturn ∂A\n\n# bad:\n∂A = foo(x)\nreturn @thunk(∂A)","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"In the bad example foo(x) gets computed eagerly, and all that the thunk is doing is wrapping the already calculated result in a function that returns it.","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"Do not use @thunk if this would be equal or more work than actually evaluating the expression itself. Examples being:","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"The expression being a constant\nThe expression is merely wrapping something in a struct, such as Adjoint(x) or Diagonal(x)\nThe expression being itself a thunk\nThe expression being from another rrule or frule; it would be @thunked if required by the defining rule already.\nThere is only one derivative being returned, so from the fact that the user called frule/rrule they clearly will want to use that one.","category":"page"},{"location":"rule_author/writing_good_rules.html#structs","page":"Writing good rules","title":"Structs: constructors and functors","text":"","category":"section"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"To define an frule or rrule for a function foo we dispatch on the type of foo, which is typeof(foo). For example, the rrule signature would be like:","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"function rrule(::typeof(foo), args...; kwargs...)\n    ...\n    return y, foo_pullback\nend","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"For a struct Bar,","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"struct Bar\n    a::Float64\nend\n\n(bar::Bar)(x, y) = return bar.a + x + y # functor (i.e. callable object, overloading the call action)","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"we can define an frule/rrule for the Bar constructor(s), as well as any Bar functors.","category":"page"},{"location":"rule_author/writing_good_rules.html#Constructors","page":"Writing good rules","title":"Constructors","text":"","category":"section"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"To define an rrule for a constructor for a  type Bar we need to be careful to dispatch only on Type{Bar}. For example, the rrule signature for a Bar constructor would be like:","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"function ChainRulesCore.rrule(::Type{Bar}, a)\n    Bar_pullback(Δbar) = NoTangent(), Δbar.a\n    return Bar(a), Bar_pullback\nend","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"Use Type{<:Bar} (with the <:) for non-concrete types, such that the rrule is defined for all subtypes. In particular, be careful not to use typeof(Bar) here. Because typeof(Bar) is DataType, using this to define an rrule/frule will define an rrule/frule for all constructors.","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"You can check which to use with Core.Typeof:","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"julia> function foo end\nfoo (generic function with 0 methods)\n\njulia> typeof(foo)\ntypeof(foo)\n\njulia> Core.Typeof(foob)\ntypeof(foo)\n\njulia> typeof(Bar)\nDataType\n\njulia> Core.Typeof(Bar)\nType{Bar}\n\njulia> abstract type AbstractT end\n\njulia> typeof(AbstractT)\nDataType\n\njulia> Core.Typeof(AbstractT)\nType{AbstractT}","category":"page"},{"location":"rule_author/writing_good_rules.html#Functors-(callable-objects)","page":"Writing good rules","title":"Functors (callable objects)","text":"","category":"section"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"In contrast to defining a rule for a constructor, it is possible to define rules for calling an instance of an object. In that case, use bar::Bar, i.e.","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"function ChainRulesCore.rrule(bar::Bar, x, y)\n    # Notice the first return is not `NoTangent()`\n    Bar_pullback(Δy) = Tangent{Bar}(;a=Δy), Δy, Δy\n    return bar(x, y), Bar_pullback\nend","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"to define the rules.","category":"page"},{"location":"rule_author/writing_good_rules.html#Ensure-your-pullback-can-accept-the-right-types","page":"Writing good rules","title":"Ensure your pullback can accept the right types","text":"","category":"section"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"As a rule the number of types you need to accept in a pullback is theoretically unlimitted, but practically highly constrained to be in line with the primal return type. The three kinds of inputs you will practically need to accept one or more of: natural tangents, structural tangents, and thunks. You do not in general have to handle AbstractZeros as the AD system will not call the pullback if the input is a zero, since the output will also be. Some more background information on these types can be found in the design notes. In many cases all these tangents can be treated the same: tangent types overload a bunch of linear-operators, and the majority of functions used inside a pullback are linear operators. If you find linear operators from Base/stdlibs that are not supported, consider opening an issue or a PR on the ChainRulesCore.jl repo.","category":"page"},{"location":"rule_author/writing_good_rules.html#Natural-tangents","page":"Writing good rules","title":"Natural tangents","text":"","category":"section"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"Natural tangent types are the types you might feel the tangent should be, to represent a small change in the primal value. For example, if the primal is a Float32, the natural tangent is also a Float32. Slightly more complex, for a ComplexF64 the natural tangent is again also a ComplexF64, we almost never want to use the structural tangent Tangent{ComplexF64}(re=..., im=...) which is defined. For other cases, this gets a little more complicated, see below. These are a purely human notion, they are the types the user wants to use because they make the math easy. There is currently no formal definition of what constitutes a natural tangent, but there are a few heuristics. For example, if a primal type P overloads subtraction (-(::P,::P)) then that generally returns a natural tangent type for P; but this is not required to be defined and sometimes it is defined poorly.","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"Common cases for types that represent a vector-space (e.g. Float64, Array{Float64}) is that the natural tangent type is the same as the primal type. However, this is not always the case. For example for a PDiagMat a natural tangent is Diagonal since there is no requirement that a positive definite diagonal matrix has a positive definite tangent. Another example is for a DateTime, any Period subtype, such as Millisecond or Nanosecond is a natural tangent. There are often many different natural tangent types for a given primal type. However, they are generally closely related and duck-type the same. For example, for most AbstractArray subtypes, most other AbstractArrays (of right size and element type) can be considered as natural tangent types.","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"Not all types have natural tangent types. For example there is no natural tangent for a Tuple. It is not a Tuple since that doesn't have any method for +. Similar is true for many structs. For those cases there is only a structural tangent.","category":"page"},{"location":"rule_author/writing_good_rules.html#Structural-tangents","page":"Writing good rules","title":"Structural tangents","text":"","category":"section"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"Structural tangents are tangent types that shadow the structure of the primal type. They are represented by the Tangent type. They can represent any composite type, such as a tuple, or a structure (or a NamedTuple) etc.","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"info: Do I have to support the structural tangents as well?\nTechnically, you might not actually have to write rules to accept structural tangents; if the AD system never has to decompose down to the level of getfield. This is common for types that don't support user getfield/getproperty access, and that have a lot of rules for the ways they are accessed (such cases include some AbstractArray subtypes). You really should support it just in case; especially if the primal type in question is not restricted to a well-tested concrete type. But if it is causing struggles, then you can leave it off til someone complains.","category":"page"},{"location":"rule_author/writing_good_rules.html#Thunks","page":"Writing good rules","title":"Thunks","text":"","category":"section"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"A thunk (either a Thunk, or a InplaceableThunk), represents a delayed computation. They can be thought of as a wrapper of the value the computation returns. In this sense they wrap either a natural or structural tangent.","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"warning: You should support AbstractThunk inputs even if you don't use thunks\nUnfortunately the AD sytems do not know which rules support thunks and which do not.  So all rules have to; at least if they want to play nicely with arbitrary AD systems.  Luckily it is not hard: much of the time they will duck-type as the object they wrap.  If not, then just add a unthunk after the start of your pullback.  (Even when they do duck-type, if they are used multiple times then unthunking at the start will prevent them from being recomputed.)  If you are using @thunk and the input is only needed for one of them then the unthunk should be in that one.  If not, and you have a bunch of pullbacks you might like to write a little helper unthunking(f) = x̄ -> f(unthunk(x̄)) that you can wrap your pullback function in before returning it from the rrule.  Yes, this is a bit of boiler-plate, and it is unfortunate.  Sadly, it is needed because if the AD wants to benefit it can't get that benifit unless things are not unthunked unnecessarily.  Which eventually allows them in some cases to never be unthunked at all.  There are two ways common things are never unthunked.  One is if the unthunking happens inside a @thunk which is never unthunked itself because it is the tangent for a primal input that never has it's tangent queried.  The second is if they are not unthunked because the rule does not need to know what is inside: consider the pullback for identity: x̄ -> (NoTangent(), x̄).","category":"page"},{"location":"rule_author/writing_good_rules.html#Use-@not_implemented-appropriately","page":"Writing good rules","title":"Use @not_implemented appropriately","text":"","category":"section"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"You can use @not_implemented to mark missing tangents. This is helpful if the function has multiple inputs or outputs, and you have worked out analytically and implemented some but not all tangents.","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"It is recommended to include a link to a GitHub issue about the missing tangent in the debugging information:","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"@not_implemented(\n    \"\"\"\n    derivatives of Bessel functions with respect to the order are not implemented:\n    https://github.com/JuliaMath/SpecialFunctions.jl/issues/160\n    \"\"\"\n)","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"Do not use @not_implemented if the tangent does not exist mathematically (use NoTangent() instead).","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"Note: ChainRulesTestUtils.jl marks @not_implemented tangents as \"test broken\".","category":"page"},{"location":"rule_author/writing_good_rules.html#Use-rule-definition-tools","page":"Writing good rules","title":"Use rule definition tools","text":"","category":"section"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"Rule definition tools can help you write more frules and the rrules with less lines of code. See using rule definition tools section for more details.","category":"page"},{"location":"rule_author/writing_good_rules.html#Be-careful-about-pullback-closures-calling-other-methods-of-themselves","page":"Writing good rules","title":"Be careful about pullback closures calling other methods of themselves","text":"","category":"section"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"Due to JuliaLang/Julia#40990, a closure calling another (or the same) method of itself often comes out uninferable (and thus effectively type-unstable). This can be avoided by moving the pullback definition outside the function, so that it is no longer a closure. For example:","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"double_it(x::AbstractArray) = 2 .* x\n\nfunction ChainRulesCore.rrule(::typeof(double_it), x)\n    double_it_pullback(ȳ::AbstractArray) = (NoTangent(), 2 .* ȳ)\n    double_it_pullback(ȳ::AbstractThunk) = double_it_pullback(unthunk(ȳ))\n    return double_it(x), double_it_pullback\nend","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"Ends up infering a return type of Any","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"julia> _, pullback = rrule(double_it, [2.0, 3.0])\n([4.0, 6.0], var\"#double_it_pullback#8\"(Core.Box(var\"#double_it_pullback#8\"(#= circular reference @-2 =#))))\n\njulia> @code_warntype pullback(@thunk([10.0, 10.0]))\nVariables\n  #self#::var\"#double_it_pullback#8\"\n  ȳ::Core.Const(Thunk(var\"#9#10\"()))\n  double_it_pullback::Union{}\n\nBody::Any\n1 ─ %1 = Core.getfield(#self#, :double_it_pullback)::Core.Box\n│   %2 = Core.isdefined(%1, :contents)::Bool\n└──      goto #3 if not %2\n2 ─      goto #4\n3 ─      Core.NewvarNode(:(double_it_pullback))\n└──      double_it_pullback\n4 ┄ %7 = Core.getfield(%1, :contents)::Any\n│   %8 = Main.unthunk(ȳ)::Vector{Float64}\n│   %9 = (%7)(%8)::Any\n└──      return %9","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"This can be solved by moving the pullbacks outside the function so they are not closures, and thus to not run into this upstream issue. In this case that is fairly simple, since this example doesn't close over anything (if it did then would need a closure calling an outside function that calls itself. See this example.).","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"_double_it_pullback(ȳ::AbstractArray) = (NoTangent(), 2 .* ȳ)\n_double_it_pullback(ȳ::AbstractThunk) = _double_it_pullback(unthunk(ȳ))\n\nfunction ChainRulesCore.rrule(::typeof(double_it), x)\n    return double_it(x), _double_it_pullback\nend","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"This infers just fine:","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"julia> _, pullback = rrule(double_it, [2.0, 3.0])\n([4.0, 6.0], _double_it_pullback)\n\njulia> @code_warntype pullback(@thunk([10.0, 10.0]))\nVariables\n  #self#::Core.Const(_double_it_pullback)\n  ȳ::Core.Const(Thunk(var\"#7#8\"()))\n\nBody::Tuple{NoTangent, Vector{Float64}}\n1 ─ %1 = Main.unthunk(ȳ)::Vector{Float64}\n│   %2 = Main._double_it_pullback(%1)::Core.PartialStruct(Tuple{NoTangent, Vector{Float64}}, Any[Core.Const(NoTangent()), Vector{Float64}])\n└──      return %2","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"Though in this particular case, it can also be solved by taking advantage of duck-typing and just writing one method. Thus avoiding the call that confuses the compiler. Thunks duck-type as the type they wrap in most cases: including broadcast multiplication.","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"function ChainRulesCore.rrule(::typeof(double_it), x)\n    double_it_pullback(ȳ) = (NoTangent(), 2 .* ȳ)\n    return double_it(x), double_it_pullback\nend","category":"page"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"This infers perfectly.","category":"page"},{"location":"rule_author/writing_good_rules.html#CAS-systems-are-your-friends.","page":"Writing good rules","title":"CAS systems are your friends.","text":"","category":"section"},{"location":"rule_author/writing_good_rules.html","page":"Writing good rules","title":"Writing good rules","text":"It is very easy to check gradients or derivatives with a computer algebra system (CAS) like WolframAlpha.","category":"page"},{"location":"rule_author/superpowers/opt_out.html#opt_out","page":"@opt_out","title":"Opting out of rules","text":"","category":"section"},{"location":"rule_author/superpowers/opt_out.html","page":"@opt_out","title":"@opt_out","text":"It is common to define rules fairly generically. Often matching (or exceeding) how generic the matching original primal method is. Sometimes this is not the correct behaviour. Sometimes the AD can do better than this human defined rule. If this is generally the case, then we should not have the rule defined at all. But if it is only the case for a particular set of types, then we want to opt-out just that one. This is done with the @opt_out macro.","category":"page"},{"location":"rule_author/superpowers/opt_out.html","page":"@opt_out","title":"@opt_out","text":"Consider one a rrule for sum (the following simplified from the one in ChainRules.jl itself)","category":"page"},{"location":"rule_author/superpowers/opt_out.html","page":"@opt_out","title":"@opt_out","text":"function rrule(::typeof(sum), x::AbstractArray{<:Number})\n    y = sum(x; dims=dims)\n    project = ProjectTo(x)\n    function sum_pullback(ȳ)\n        x̄ = project(fill(ȳ, size(x)))\n        return (NoTangent(), x̄)\n    end\n    return y, sum_pullback\nend","category":"page"},{"location":"rule_author/superpowers/opt_out.html","page":"@opt_out","title":"@opt_out","text":"That is a fairly reasonable rrule for the vast majority of cases. You might have a custom array type for which you could write a faster rule. In which case you would do that, by writing a faster, more specific, rrule. But sometimes, it is the case that ADing the (faster, more specific) primal for your custom array type would yeild the faster pullback without you having to write a rrule by hand.","category":"page"},{"location":"rule_author/superpowers/opt_out.html","page":"@opt_out","title":"@opt_out","text":"Consider a summing  SkewSymmetric (anti-symmetric) matrix. The skew symmetric matrix has structural zeros on the diagonal, and off-diagonals are paired with their negation. Thus the sum is always going to be zero. As such the author of that matrix type would probably have overloaded sum(x::SkewSymmetric{T}) where T = zero(T). ADing this would result in the tangent computed for x as ZeroTangent() and it would be very fast since AD can see that x is never used in the right-hand side. In contrast the generic method for AbstractArray defined above would have to allocate the fill array, and then compute the skew projection. Only to find out the output would be projected to SkewSymmetric(zeros(T)) anyway (slower, and a less useful type).","category":"page"},{"location":"rule_author/superpowers/opt_out.html","page":"@opt_out","title":"@opt_out","text":"To opt-out of using the generic rrule and to allow the AD system to do its own thing we use the @opt_out macro, to say to not use it for sum of SkewSymmetric.","category":"page"},{"location":"rule_author/superpowers/opt_out.html","page":"@opt_out","title":"@opt_out","text":"@opt_out rrule(::typeof(sum), ::SkewSymmetric)","category":"page"},{"location":"rule_author/superpowers/opt_out.html","page":"@opt_out","title":"@opt_out","text":"Perhaps we might not want to ever use rules for SkewSymmetric, because we have determined that it is always better to leave it to the AD, unless a very specific rule has been written[1]. We could then opt-out for all 1 arg functions.","category":"page"},{"location":"rule_author/superpowers/opt_out.html","page":"@opt_out","title":"@opt_out","text":"@opt_out rrule(::Any, ::SkewSymmetric)","category":"page"},{"location":"rule_author/superpowers/opt_out.html","page":"@opt_out","title":"@opt_out","text":"Though this is likely to cause some method-ambiguities, if we do it for more, but we can resolve those.","category":"page"},{"location":"rule_author/superpowers/opt_out.html","page":"@opt_out","title":"@opt_out","text":"Similar can be done  @opt_out frule. It can also be done passing in a RuleConfig.","category":"page"},{"location":"rule_author/superpowers/opt_out.html","page":"@opt_out","title":"@opt_out","text":"warning: If the general rule uses a config, the opt-out must also\nFollowing the same principles as for rules with config, a rule with a RuleConfig argument will take precedence over one without, including if that one is a opt-out rule. But if the general rule does not use a config, then the opt-out rule can use a config. This allows, for example, you to use opt-out to avoid a particular AD system using a opt-out rule that takes that particular AD's config.","category":"page"},{"location":"rule_author/superpowers/opt_out.html","page":"@opt_out","title":"@opt_out","text":"[1]: seems unlikely, but it is possible, there is a lot of structure that can be taken advantage of for some matrix types.","category":"page"},{"location":"design/changing_the_primal.html#change_primal","page":"Changing the Primal","title":"Design Notes: Why can you change the primal computation?","text":"","category":"section"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"These design notes are to help you understand ChainRules.jl's rrule function. It explains why we have a rrule function that returns both the primal result (i.e. the output for the forward pass) and the pullback as a closure. It might be surprising to some AD authors, who might expect just a function that performs the pullback, that the rrule function computes the primal result as well as the pullback. In particularly, rrule allows you to change how the primal result is computed. We will illustrate in this document why being able to change the computation of the primal is crucial for efficient AD.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"note: What about `frule`?\nDiscussion here is focused on on reverse mode and rrule. Similar concerns do apply to forward mode and frule. In forward mode these concerns lead to the fusing of the pushforward into frule. All the examples given here also apply in forward mode. In fact in forward mode there are even more opportunities to take advantage of sharing work between the primal and derivative computations. A particularly notable example is in efficiently calculating the pushforward of solving a differential equation via expanding the system of equations to also include the derivatives before solving it.","category":"page"},{"location":"design/changing_the_primal.html#The-Journey-to-rrule","page":"Changing the Primal","title":"The Journey to rrule","text":"","category":"section"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"Let's imagine a different system for rules, one that doesn't let you define the computation of the primal. This system is what a lot of AD systems have. It is what Nabla.jl had originally.[1] We will have a primal (i.e. forward) pass that directly executes the primal function and just records the primal function, its inputs and its output onto the tape.[2]. Then during the gradient (i.e. reverse) pass it has a function which receives those records from the tape along with the sensitivity of the output, and gives back the sensitivity of the input. We will call this function pullback_at, as it pulls back the sensitivity at a given primal point. To make this concrete:","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"y = f(x)  # primal program\nx̄ = pullback_at(f, x, y, ȳ)","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"Let's illustrate this with examples for sin and for the logistic sigmoid.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"<details open><summary>Example for `sin`</summary>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"y = sin(x)\npullback_at(::typeof(sin), x, y, ȳ) = ȳ * cos(x)","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"pullback_at uses the primal input x, and the sensitivity being pulled back ȳ.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"</details>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"<details open><summary>Example for the logistic sigmoid</summary>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"σ(x) = 1/(1 + exp(-x))  # = exp(x) / (1 + exp(x))\ny = σ(x)\npullback_at(::typeof(σ), x, y, ȳ) = ȳ * y * σ(-x)  # = ȳ * σ(x) * σ(-x)","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"Notice that in pullback_at we are not only using input x but also using the primal output y . This is a nice bit of symmetry that shows up around exp.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"</details>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"Now let's consider why we implement rrules in the first place. One key reason is to insert domain knowledge so as to compute the derivative more efficiently than AD would just by breaking everything down into +, *, etc.[3] What insights do we have about sin and cos? What about using sincos?","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"<details open><summary>Example for `sin`</summary>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"julia> using BenchmarkTools\n\njulia> @btime sin(x) setup=(x=rand());\n  3.838 ns (0 allocations: 0 bytes)\n\njulia> @btime cos(x) setup=(x=rand());\n  4.795 ns (0 allocations: 0 bytes)\n\njulia> 3.838 + 4.795\n8.633","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"vs computing both together:","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"julia> @btime sincos(x) setup=(x=rand());\n  6.028 ns (0 allocations: 0 bytes)","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"</details>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"What about the logistic sigmoid? We note that the two values we need are σ(x) and σ(-x) If we write these as: sigma(x) = frace^x1+e^x and sigma(-x) = frac11+e^x then we see they have the common term e^x. exp(x) is a much more expensive operation than + and /. So we can save time, if we can reuse that exp(x).","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"<details open><summary>Example for the logistic sigmoid</summary>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"If we have to computing separately:","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"julia> @btime 1/(1+exp(x)) setup=(x=rand());\n  5.622 ns (0 allocations: 0 bytes)\n\njulia> @btime 1/(1+exp(-x)) setup=(x=rand());\n  6.036 ns (0 allocations: 0 bytes)\n\njulia> 5.622 + 6.036\n11.658","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"vs reusing exp(x):","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"julia> @btime exp(x) setup=(x=rand());\n  5.367 ns (0 allocations: 0 bytes)\n\njulia> @btime ex/(1+ex) setup=(ex=exp(rand()));\n  1.255 ns (0 allocations: 0 bytes)\n\njulia> @btime 1/(1+ex) setup=(ex=exp(rand()));\n  1.256 ns (0 allocations: 0 bytes)\n\njulia> 5.367 + 1.255 + 1.256\n7.878","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"</details>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"So we are talking about a 30-40% speed-up from these optimizations.[4]","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"It is faster to  compute sin and cos at the same time via sincos than it is to compute them one after the other. And it is faster to reuse the exp(x) in computing σ(x) and σ(-x). How can we incorporate this insight into our system? We know we can compute both of these in the primal — because they only depend on x and not on ȳ — but there is nowhere to put them that is accessible both to the primal pass and the gradient pass code.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"What if we introduced some variable called intermediates that is also recorded onto the tape during the primal pass? We would need to be able to modify the primal pass to do this, so that we can actually put the data into the intermediates. So we will introduce a function: augmented_primal, that will return the primal output plus the intermediates that we want to reuse in the gradient pass. Then we will make our AD system replace calls to the primal with calls to the augmented_primal of the primal function and take care of all the bookkeeping. So that would look like:","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"y = f(x)  # primal program\ny, intermediates = augmented_primal(f, x)\nx̄ = pullback_at(f, x, y, ȳ, intermediates)","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"<details open><summary>Example for `sin`</summary>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"function augmented_primal(::typeof(sin), x)\n    y, cx = sincos(x)\n    return y, (; cx=cx)  # use a NamedTuple for the intermediates\nend\n\npullback_at(::typeof(sin), x, y, ȳ, intermediates) = ȳ * intermediates.cx","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"</details>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"<details open><summary>Example for the logistic sigmoid</summary>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"function augmented_primal(::typeof(σ), x)\n    ex = exp(x)\n    y = ex / (1 + ex)\n    return y, (; ex=ex)  # use a NamedTuple for the intermediates\nend\n\npullback_at(::typeof(σ), x, y, ȳ, intermediates) = ȳ * y / (1 + intermediates.ex)","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"</details>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"Cool! That lets us do what we wanted. We net decreased the time it takes to run the primal and gradient passes. We have now demonstrated the title question of why we want to be able to modify the primal pass. We will go into that more later and have some more usage examples, but first let's continue to see how we go from augmented_primal and pullback_at to rrule.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"One thing we notice when looking at pullback_at is it really is starting to have a lot of arguments. It had a fair few already, and now we are adding intermediates as well, making it even more unwieldy. Not to mention these are fairly simple example, the sin and σ functions have 1 input and no keyword arguments. Furthermore, we often don't even use all of the arguments to pullback_at. The new code for pulling back sin — which uses sincos and intermediates — no longer needs x, and it never needed y (though sigmoid σ does). And storing all these things on the tape — inputs, outputs, sensitivities, intermediates — is using up extra memory. What if we generalized the idea of the intermediate named tuple, and had augmented_primal return a struct that just held anything we might want put on the tape.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"struct PullbackMemory{P, S}\n    primal_function::P\n    state::S\nend\n# convenience constructor:\nPullbackMemory(primal_function; state...) = PullbackMemory(primal_function, state)\n# convenience accessor so that `m.x` is same as `m.state.x`\nBase.getproperty(m::PullbackMemory, propname) = getproperty(getfield(m, :state), propname)","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"So changing our API we have:","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"y = f(x)  # primal program\ny, pb = augmented_primal(f, x)\nx̄ = pullback_at(pb, ȳ)","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"which is much cleaner.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"<details open><summary>Example for `sin`</summary>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"function augmented_primal(::typeof(sin), x)\n    y, cx = sincos(x)\n    return y, PullbackMemory(sin; cx=cx)\nend\n\npullback_at(pb::PullbackMemory{typeof(sin)}, ȳ) = ȳ * pb.cx","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"</details>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"<details open><summary>Example for the logistic sigmoid</summary>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"function augmented_primal(::typeof(σ), x)\n    ex = exp(x)\n    y = ex / (1 + ex)\n    return y, PullbackMemory(σ; y=y, ex=ex)\nend\n\npullback_at(pb::PullbackMemory{typeof(σ)}, ȳ) = ȳ * pb.y / (1 + pb.ex)","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"</details>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"That now looks much simpler; pullback_at only ever has 2 arguments.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"One way we could make it nicer to use is by making PullbackMemory a callable object. Conceptually, for a particular evaluation of an operation, the PullbackMemory is fixed. It is fully determined by the end of the primal pass. The during the gradient (reverse) pass the PullbackMemory is used to successively compute the ȳ  argument. So it makes sense to make PullbackMemory a callable object that acts on the sensitivity. We can do that via call overloading:","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"y = f(x)  # primal program\ny, pb = augmented_primal(f, x)\nx̄ = pb(ȳ)","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"<details open><summary>Example for `sin`</summary>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"function augmented_primal(::typeof(sin), x)\n    y, cx = sincos(x)\n    return y, PullbackMemory(sin; cx=cx)\nend\n(pb::PullbackMemory{typeof(sin)})(ȳ) = ȳ * pb.cx","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"</details>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"<details open><summary>Example for the logistic sigmoid</summary>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"function augmented_primal(::typeof(σ), x)\n    ex = exp(x)\n    y = ex / (1 + ex)\n    return y, PullbackMemory(σ; y=y, ex=ex)\nend\n\n(pb::PullbackMemory{typeof(σ)})(ȳ) = ȳ * pb.y / (1 + pb.ex)","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"</details>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"Let's recap what we have done here. We now have an object pb that acts on the cotangent of the output of the primal ȳ to give us the cotangent of the input of the primal function x̄. pb is not just the memory of state required for the pullback, it is the pullback.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"We have one final thing to do, which is to think about how we make the code easy to modify. Let's go back and think about the changes we would have make to go from our original way of writing that only used the inputs/outputs, to one that used the intermediate state.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"<details open><summary>Example for `sin`</summary>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"To rewrite that original formulation in the new pullback form we have:","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"function augmented_primal(::typeof(sin), x)\n    y = sin(x)\n    return y, PullbackMemory(sin; x=x)\nend\n(pb::PullbackMemory)(ȳ) = ȳ * cos(pb.x)","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"To go from that to:","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"function augmented_primal(::typeof(sin), x)\n    y, cx = sincos(x)\n    return y, PullbackMemory(sin; cx=cx)\nend\n(pb::PullbackMemory)(ȳ) = ȳ * pb.cx","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"</details>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"<details open><summary>Example for the logistic sigmoid</summary>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"function augmented_primal(::typeof(σ), x)\n    y = σ(x)\n    return y, PullbackMemory(σ; y=y, x=x)\nend\n(pb::PullbackMemory{typeof(σ)})(ȳ) = ȳ * pb.y * σ(-pb.x)","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"to get to:","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"function augmented_primal(::typeof(σ), x)\n    ex = exp(x)\n    y = ex/(1 + ex)\n    return y, PullbackMemory(σ; y=y, ex=ex)\nend\n(pb::PullbackMemory{typeof(σ)})(ȳ) = ȳ * pb.y/(1 + pb.ex)","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"</details>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"We should think about how we might want to make future changes to this code.[6]","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"We need to make a series of changes:","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"update what work is done in the primal, to compute the intermediate values.\nupdate what is stored in the PullbackMemory.\nupdate the function that applies the pullback so it uses the new thing that was stored.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"It's important these parts all stay in sync. It's not too bad for this simple example with just one or two things to remember. For more complicated multi-argument functions, which we will show below, you often end up needing to remember half a dozen things, like sizes and indices relating to each input/output, so it gets a little more fiddly to make sure you remember all the things you need to and give them the same name in both places. Is there a way we can automatically just have all the things we use remembered for us?  Surprisingly for such a specific request, there actually is: a closure.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"A closure in Julia is a callable structure that automatically contains a field for every object from its parent scope that is used in its body. There are incredible ways to abuse this; but here we can use closures exactly as they are intended. Replacing PullbackMemory with a closure that works the same way lets us avoid having to manually control what is remembered and lets us avoid separately writing the call overload.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"<details open><summary>Example for `sin`</summary>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"function augmented_primal(::typeof(sin), x)\n    y, cx = sincos(x)\n    pb = ȳ -> cx * ȳ  # pullback closure. closes over `cx`\n    return y, pb\nend","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"</details>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"<details open><summary>Example for the logistic sigmoid</summary>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"function augmented_primal(::typeof(σ), x)\n    ex = exp(x)\n    y = ex / (1 + ex)\n    pb = ȳ -> ȳ * y / (1 + ex)  # pullback closure. closes over `y` and `ex`\n    return y, pb\nend","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"</details>","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"This is pretty clean now.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"Our augmented_primal is now within spitting distance of rrule. All that is left is a rename and some extra conventions around multiple outputs and gradients with respect to callable objects.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"This has been a journey into how we get to rrule as it is defined in ChainRulesCore. We started with an unaugmented primal function and a pullback_at function that only saw the inputs and outputs of the primal. We realized a key limitation of this was that we couldn't share computational work between the primal and gradient passes. To solve this we introduced the notation of some intermediate that is shared from the primal to the pullback. We successively improved that idea, first by making it a type that held everything that is needed for the pullback: the PullbackMemory, which we then made callable, so it was itself the pullback. Finally, we replaced that separate callable structure with a closure, which kept everything in one place and made it more convenient.","category":"page"},{"location":"design/changing_the_primal.html#More-Shared-Work-Examples","page":"Changing the Primal","title":"More Shared Work Examples","text":"","category":"section"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"sin and the logistic sigmoid are nice, simple examples of when it is useful to share work between the primal and the pullback. There are many others though. It is actually surprising that in so many cases it is reasonable to write the rules where the only shared information between the primal and the pullback is the primal inputs (like our original sin), or primal outputs (like our original logistic sigmoid). Under our formulation above, those primal inputs/outputs are shared information just like any other. Beyond this, there are a number of other decent applications.","category":"page"},{"location":"design/changing_the_primal.html#getindex","page":"Changing the Primal","title":"getindex","text":"","category":"section"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"In Julia (and many other numerical languages) indexing can take many more arguments than simply a couple of integers, such as boolean masking arrays (logical indexing), ranges for slices, etc. Converting the arguments to plain integers, arrays of integers, and ranges with Base.to_indices is the first thing that getindex does. It then re-calls getindex with these simpler types to get the result.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"The result of pulling back the getindex operation is always an array that is all zeros, except for the elements that are selected, which are set to the appropriate sensitivities being pulled back. To identify which actual positions in the array are being gotten/set is common work to both primal and gradient computations. We really don't want to deal with fancy indexing types during the pullback, because there are weird edge cases like indexing in such a way that the same element is output twice (and thus we have 2 sensitivities we need to add to it). We can pull the to_indices out of the primal computation and remember the plain indexes used, then can reuse them to set gradients during the pullback.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"See the code for this in ChainRules.jl","category":"page"},{"location":"design/changing_the_primal.html#exp(::Matrix)","page":"Changing the Primal","title":"exp(::Matrix)","text":"","category":"section"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"Matrix Functions are generalizations of scalar functions to operate on matrices. Note that this is distinct from simply element-wise application of the function to the matrix's elements. The Matrix Exponential exp(::Matrix) is a particularly important matrix function.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"Al-Mohy and Higham (2009)[7], published a method for computing the pullback of exp(::Matrix). It is pretty complex and very cool. To quote its abstract (emphasis mine):","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"The algorithm is derived from the scaling and squaring method by differentiating the Padé approximants and the squaring recurrence, re-using quantities computed during the evaluation of the Padé approximant, and intertwining the recurrences in the squaring phase.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"Julia does in fact use a Padé approximation to compute exp(::Matrix). So we can extract the code for that into our augmented primal, and add remembering the intermediate quantities that are to be used. See the code for this in ChainRules.jl","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"An interesting scenario here that may be of concern to some: if Julia changes the algorithm it uses to compute exp(::Matrix), then during an AD primal pass, it will continue to use the old Padé approximation based algorithm. This may actually happen, as there are many other algorithms that can compute the matrix exponential. Further, perhaps there might be an improvement to the exact coefficient or cut-offs used by Julia's current Padé approximation. If Julia made this change it would not be considered breaking. Exact floating point numerical values are not generally considered part of the SemVer-bound API. Rather only the general accuracy of the computed value relative to the true mathematical value (e.g. for common scalar operations Julia promises 1 ULP).","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"This change will result in the output of the AD primal pass not being exactly equal to what would be seen from just running the primal code. It will still be accurate because the current implementation is accurate, but it will be different. It is our argument that in general this should be considered acceptable, as long as the AD primal pass is in general about as accurate as the unaugmented primal. E.g. it might overshoot for some values the unaugmented primal undershoots for.","category":"page"},{"location":"design/changing_the_primal.html#eigvals","page":"Changing the Primal","title":"eigvals","text":"","category":"section"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"eigvals is a real case where the algorithm for the augmented primal and the original primal is already different today. To compute the pullback of eigvals you need to know not only the eigenvalues but also the eigenvectors. The eigen function computes both, so that is used in the augmented primal. See the code for this in ChainRules.jl. If we could not compute and remember the eigenvectors in the primal pass, we would have to call eigen in the gradient pass anyway and fully recompute eigenvectors and eigenvalues, more than doubling the total work.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"However, if you trace this down, it actually uses a different algorithm.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"eigvals basically wraps LAPACK.syevr!('N', ...), which goes through DSYEVR and eventually calls DSTERF, which uses \"Pal-Walker-Kahan variant of the QL or QR algorithm.\" to compute eigenvalues","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"In contrast, eigen wraps LAPACK.syevr!('V',...) which also goes through DSYEVR but eventually calls DSTEMR, which calculates eigenvalues \"either by bisection or the dqds algorithm.\".","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"Both of these are very good algorithms. LAPACK has had decades of work by experts and is one of the most trusted libraries for linear algebra. But they are different algorithms that give different results. The differences in practice are around 10^-15, which while very small on absolute terms are as far as Float64 is concerned a very real difference.","category":"page"},{"location":"design/changing_the_primal.html#Matrix-Division","page":"Changing the Primal","title":"Matrix Division","text":"","category":"section"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"Roughly speaking: Y=A\\B is the function that finds the least-square solution to YA ≈ B. When solving such a system, the efficient way to do so is to factorize A into an appropriate factorized form such as Cholesky or QR, then perform the \\ operation on the factorized form. The pullback of A\\B with respect to B is Ȳ -> A' \\ Ȳ. It should be noted that this involves computing the factorization of A' (the adjoint of A).[8] In this computation the factorization of the original A can reused. Doing so can give a 4x speed-up.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"We don't have this in ChainRules.jl yet, because Julia is missing some definitions of adjoint of factorizations (JuliaLang/julia#38293).[8] We have been promised them for Julia v1.7 though. You can see what the code would look like in PR #302.","category":"page"},{"location":"design/changing_the_primal.html#Conclusion","page":"Changing the Primal","title":"Conclusion","text":"","category":"section"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"This document has explained why rrule is the way it is. In particular it has highlighted why the primal computation is able to be changed from simply calling the function. Further, it has explained why rrule returns a closure for the pullback, rather than it being a separate function. It has highlighted several places in ChainRules.jl where this has allowed us to significantly improve performance. Being able to change the primal computation is practically essential for a high performance AD system.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"[1]: I am not just picking on Nabla randomly. Many of the core developers of ChainRules worked on Nabla prior. It's a good AD, but ChainRules incorporates lessons learned from working on Nabla.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"[2]: which may be an explicit tape or an implicit tape that is actually incorporated into generated code (à la Zygote)","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"[3]: Another key reason is if the operation is a primitive that is not defined in terms of more basic operations. In many languages this is the case for sin; where the actual implementation is in some separate libm.so. But actually sin in Julia is defined in terms of a polynomial. It's fairly vanilla Julia code. It shouldn't be too hard for an AD that only knows about basic operations like + and * to AD through it. In any case, that is another discussion for another day.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"[4]: Sure, this is small fries and depending on Julia version might just get solved by the optimizer[5], but go with it for the sake of example.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"[5]: To be precise, this is very likely to be solved by the optimizer inlining both and then performing common subexpression elimination, with the result that it generates the code for sincos just from having sin and cos inside the same function. However, this actually doesn't apply in the case of AD, as it is not possible to inline code called in the gradient pass into the primal pass. Those are separate functions called at very different times. This is something opaque closures should help solve.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"[6]: One change we might consider is to have logistic sigmoid to only remember one thing. Rather than remembering y and ex to use in the pullback, we could compute y / (1 + ex) during the augmented primal, and just remember that.","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"[7]: Al-Mohy, Awad H. and Higham, Nicholas J. (2009) Computing the Fréchet Derivative of the Matrix Exponential, with an application to Condition Number Estimation. SIAM Journal On Matrix Analysis and Applications., 30 (4). pp. 1639-1657. ISSN 1095-7162","category":"page"},{"location":"design/changing_the_primal.html","page":"Changing the Primal","title":"Changing the Primal","text":"[8]: To be clear here we mean adjoint as in the conjugate transpose of a matrix, rather than in the sense of reverse mode AD.","category":"page"},{"location":"design/many_tangents.html#manytypes","page":"Many Tangent Types","title":"Design Notes: The many-to-many relationship between tangent types and primal types","text":"","category":"section"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"ChainRules has a system where one primal type (the type having its derivative taken) can have multiple possible tangent types (the type of the derivative); and where one tangent type can correspond to multiple primal types. This is in-contrast to the Swift AD efforts, which has one tangent type per primal type (Swift uses the term associated tangent type).","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"terminology: tangent and associated tangent type\nThe use of “associated tangent type” in AD is not technically correct, as they live in the cotangent plane instead of the tangent plane. However it is often reasonable for AD to treat the cotangent plane and tangent plane as the same thing, and this was an intentional choice by the Swift team. In ChainRules we use the term “tangent type” to refer to both tangents and cotangents.","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"One thing to understand about tangents is that they have to form a vector space  (or something very like them). They need to support addition to each other, they need a zero which doesn't change what it is added to, and they need to support scalar multiplication (this isn't really required, but it is handy for things like gradient descent). Beyond being a vector space, tangents need to be able to be added to a primal value to get back another primal value. Or roughly equivalently a tangent is a difference between two primal values.","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"One thing to note in this example is that the primal does not have to be a vector. As an example, consider DateTime. A DateTime is not a vector space: there is no origin point, and DateTimes cannot be added to each other. The corresponding tangent type is any subtype of Period, such as Millisecond, Hour, Day etc.","category":"page"},{"location":"design/many_tangents.html#Natural-tangent","page":"Many Tangent Types","title":"Natural tangent","text":"","category":"section"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"For a given primal type, we say a natural tangent type is one which people would intuitively think of as representing the difference between two primal values. It tends to already exist outside of the context of AD. So Millisecond, Hour, Day etc. are examples of natural tangents for the DateTime primal.","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"Note here that we already have a one primal type to many tangent types relationship. We have Millisecond and Hour and Day all being valid tangent types for DateTime. In this case we could convert them all to a single tangent type, such as Nanoseconds, but that is not always a reasonable decision: we may run in to overflow, or lots of allocations if we need to use a BigInt to represent the number of Nanosecond since the start of the universe. For types with more complex semantics, such as array types, these considerations are much more important.","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"Natural tangent types are the types people tend to think in, and thus the type they tend to write custom sensitivity rules in. An important special case of natural tangents is when the primal type is a vector space (e.g. Real,AbstractMatrix) in which case it is common for the natural tangent type to be the same as the primal type. One exception to this is getindex. The ideal choice of tangent type for getindex on a dense array would be some type of sparse array, due to the fact the derivative will have only one non-zero element. This actually further brings us to a weirdness of tangent types not actually being closed under addition, as it would be ideal for the sparse array to become a dense array if summed over all elements.","category":"page"},{"location":"design/many_tangents.html#Structural-tangent-types","page":"Many Tangent Types","title":"Structural tangent types","text":"","category":"section"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"AD cannot automatically determine the natural tangent types for a primal. For some types we may be able to declare manually their natural tangent type. Other types will not have natural tangent types at all - e.g. NamedTuple, Tuple, WebServer, Flux.Dense -  so we are destined to make some up. So beyond natural tangent types, we also have structural tangent types. ChainRules uses Tangent{P, <:NamedTuple} to represent a structural tangent type corresponding to primal type P. Zygote v0.4 uses NamedTuple.","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"Structural tangents are derived from the structure of the input. Either automatically, as part of the AD, or manually, as part of a custom rule.","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"Consider the structure of DateTime:","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"julia> dump(now())\nDateTime\n  instant: UTInstant{Millisecond}\n    periods: Millisecond\n      value: Int64 63719890305605","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"The corresponding structural tangent is:","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"Tangent{DateTime}(\n    instant::Tangent{UTInstant{Millisecond}}(\n        periods::Tangent{Millisecond}(\n            value::Int64\n        )\n    )\n)","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"note: One must be allowed to take derivatives of integer arguments\nThis brings up another contrast to Swift. In Swift Int is considered non-differentiable, which is quite reasonable; it doesn’t have a very good definition of the limit of a small step (as that would be some floating/fixed point type). Int is intrinsically discrete. It is commonly used for indexing, and if one takes a gradient step, say turning x[2] into x[2.1] then that is an error. However, disallowing Int to be used as a tangent means we cannot handle cases like DateTime having an inner field of milliseconds counted as an integer from the unix epoch or other cases where an integer is used as a convenience for computational efficiency. In the case where a custom sensitivity rule claims that there is a non-zero derivative for an Int argument that is being used for indexing, that code is simply wrong. We can’t handle incorrect code and trying to is a path toward madness. Julia, unlike Swift, is not well suited to handling rules about what you can and can’t do with particular types.","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"So the structural tangent is another type of tangent. We must support both natural and structural tangents because AD can only create structural tangents (unless using custom sensitivity rules) and all custom sensitivities are only written in terms of natural tangents, as that is what is used in papers about derivatives.","category":"page"},{"location":"design/many_tangents.html#Semi-structural-tangents","page":"Many Tangent Types","title":"Semi-structural tangents","text":"","category":"section"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"Where there is no natural tangent type for the outermost type but there is for some of its fields, we call this a \"semi-structural\" tangent.","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"Consider if we had a representation of a country's GDP as output by some continuous time model like a Gaussian Process, where that representation is as a sequence of TimeSamples structured as follows:","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"julia> struct TimeSample\n           time::DateTime\n           value::Float64\n       end","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"We can look at its structure:","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"julia> dump(TimeSample(now(), 2.6e9))\nTimeSample\n  time: DateTime\n    instant: Dates.UTInstant{Millisecond}\n      periods: Millisecond\n        value: Int64 63720043490844\n  value: Float64 2.6e9","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"Thus we see the that structural tangent would be:","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"Tangent{TimeSample}(\n    time::Tangent{DateTime}(\n        instant::Tangent{UTInstant{Millisecond}}(\n            periods::Tangent{Millisecond}(\n                value::Int64\n            )\n        )\n    ),\n    value::Float64\n)","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"But instead in the custom sensitivity rule we would write a semi-structured tangent type. Since there is not a natural tangent type for TimeSample but there is for DateTime.","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"Tangent{TimeSample}(\n    time::Day,\n    value::Float64\n)","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"So the rule author has written a structural tangent with some fields that are natural tangents.","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"Another related case is for types that overload getproperty such as SVD and QR. In this case the structural tangent will be based on the fields, but those fields do not always have an easy relation to what is actually used in math. For example, the QR type has fields factors and t, but we would more naturally think in terms of the properties Q and R. So most rule authors would want to write semi-structural tangents based on the properties.","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"To return to the question of why ChainRules has Tangent{P, <:NamedTuple} whereas Zygote v0.4 just has NamedTuple, it relates to semi-structural derivatives, and being able to overload things more generally. If one knows that one has a semi-structural derivative based on property names, like Tangent{QR}(Q=..., R=...), and one is adding it to the true structural derivative based on field names Tangent{QR}(factors=..., τ=...), then we need to overload the addition operator to perform that correctly. We cannot happily overload similar things for NamedTuple since we don't know the primal type, only the names of the values contained. In fact we can't actually overload addition at all for NamedTuple as that would be type-piracy, so have to use Zygote.accum instead.","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"Another use of the primal being a type parameter is to catch errors. ChainRules disallows the addition of Tangent{SVD} to Tangent{QR} since in a correctly differentiated program that can never occur.","category":"page"},{"location":"design/many_tangents.html#Tangent-types-for-computational-efficiency","page":"Many Tangent Types","title":"Tangent types for computational efficiency","text":"","category":"section"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"There is another kind of unnatural tangent. One that is for computational efficiency. ChainRules has Thunks and InplaceableThunks, which wrap the computation of a derivative and delays that work until it is needed, either via the derivative being added to something or being unthunked manually, thus saving time if it is never used.","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"Another tangent type used for efficiency is ZeroTangent which represents the hard zero (in Zygote v0.4 this is nothing). For example the derivative of f(x, y)=2x with respect to y is ZeroTangent(). Add ZeroTangent() to anything, and one gets back the original thing without change. We noted that all tangents need to be a vector space.  ZeroTangent() is the trivial vector space. Further, add ZeroTangent() to any primal value (no matter the type) and you get back another value of the same primal type (the same value in fact). So it meets the requirements of a tangent type for all primal types. ZeroTangent can save on memory (since we can avoid allocating anything) and on time (since performing the multiplication ZeroTangent and Thunk are both examples of a tangent type that is valid for multiple primal types.","category":"page"},{"location":"design/many_tangents.html#Conclusion","page":"Many Tangent Types","title":"Conclusion","text":"","category":"section"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"Now, you have seen examples of both tangent types that work for multiple primal types, and primal types that have  multiple valid tangent types. Semantically we can handle these very easily in julia. Just put in a few more dispatching on +. Multiple-dispatch is great like that. The down-side is our type-inference becomes hard. If you have exactly 1 tangent type for each primal type, you can very easily work out what all the types on your reverse pass will be - you don't really need type inference - but you lose so much expressiveness.","category":"page"},{"location":"design/many_tangents.html#Appendix:-What-Swift-does","page":"Many Tangent Types","title":"Appendix: What Swift does","text":"","category":"section"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"I don't know how Swift is handling thunks, maybe they are not, maybe they have an optimizing compiler that can just slice out code-paths that don't lead to values that get used; maybe they have a language built in for lazy computation.","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"They are, as I understand it, handling ZeroTangent by requiring every tangent type to define a zero method – which it has since it is a vector space. This costs memory and time, but probably not actually all that much. With regards to handling multiple different tangent types for one primal, like natural and structural derivatives, everything needs to be converted to the canonical tangent type of that primal.","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"As I understand it, things can be automatically converted by defining conversion protocols or something like that, so rule authors can return anything that has a conversion protocol to the canonical tangent type of the primal.","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"However, it seems like this will run into problems. Recall that the natural tangent in the case of getindex on an AbstractArray was a sparse array. But for say the standard dense Array, the only reasonable canonical tangent type is also a dense Array. But if you convert a sparse array into a dense array you do giant allocations to fill in all the other entries with zero.","category":"page"},{"location":"design/many_tangents.html","page":"Many Tangent Types","title":"Many Tangent Types","text":"So this is the story about why we have many-to-many tangent types in ChainRules.","category":"page"},{"location":"index.html#ChainRules","page":"Introduction","title":"ChainRules","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Automatic differentiation (AD) is a set of techniques for obtaining derivatives of arbitrary functions. There are surprisingly many packages for doing AD in Julia. ChainRules isn't one of these packages.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The AD packages essentially combine derivatives of simple functions into derivatives of more complicated functions. They differ in the way they break down complicated functions into simple ones, but they all require a common set of derivatives of simple functions (rules).","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"ChainRules is an AD-independent set of rules, and a system for defining and testing rules.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"note: What is a rule?\nA rule encodes knowledge about propagating derivatives, e.g. that the derivative with respect to x of a*x is a, and the derivative of sin(x) is cos(x), etc.","category":"page"},{"location":"index.html#ChainRules-ecosystem-organisation","page":"Introduction","title":"ChainRules ecosystem organisation","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The ChainRules ecosystem comprises:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"ChainRulesCore.jl: a system for defining rules, and a collection of tangent types.\nChainRules.jl: a collection of rules for Julia Base and standard libraries.\nChainRulesTestUtils.jl: utilities for testing rules using finite differences.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"AD systems depend on ChainRulesCore.jl to get access to tangent types and the core rule definition functionality (frule and rrule), and on ChainRules.jl to benefit from the collection of rules for Julia Base and the standard libraries.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Packages that just want to define rules only need to depend on ChainRulesCore.jl, which is an exceptionally light dependency. They should also have a test-only dependency on ChainRulesTestUtils.jl to test the rules using finite differences.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Note that the packages with rules do not have to depend on AD systems, and neither do the AD systems have to depend on individual packages.","category":"page"},{"location":"index.html#AD-engines-supporting-ChainRules","page":"Introduction","title":"AD engines supporting ChainRules","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Numerous packages depend on ChainRulesCore to define rules for their functions.","category":"page"},{"location":"index.html#Packages-that-automatically-load-rules-from-ChainRules","page":"Introduction","title":"Packages that automatically load rules from ChainRules","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Zygote.jl is a reverse-mode AD that supports using rrules, calling back into AD, and opting out of rules. However, its own ZygoteRules.jl primitives (@adjoints) take precedence before rrules when both are defined – even if the @adjoint is less specific than the rrule. Internally it uses its own set of tangent types, e.g. nothing instead of NoTangent/ZeroTangent. It also unthunks every tangent.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Diffractor.jl is a forward- and reverse-mode AD that fully supports ChainRules, including calling back into AD, opting out of rules, and uses tangent types internally.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Yota.jl is a reverse-mode AD that fully supports ChainRules, including calling back into AD, opting out of rules, and uses tangent types internally.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Nabla.jl (deprecated) is a reverse-mode AD that supports using rrules, but not opting out of rules, nor calling back into AD.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"ReversePropagation.jl is a reverse-mode AD that supports using rrules for scalar functions, but not calling back into AD and opting out of rules.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"TaylorDiff.jl is a forward taylor mode AD.","category":"page"},{"location":"index.html#Packages-supporting-importing-rules-from-ChainRules.","page":"Introduction","title":"Packages supporting importing rules from ChainRules.","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Several packages do not automatically load rules from ChainRules by default, but support importing rules that were defined using it, e.g. with a macro.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"ReverseDiff.jl is a reverse-mode AD that supports using rrules, but not calling back into AD and opting out of rules.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Tracker.jl is a reverse mode AD that supports importing rrules","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Enzyme.jl is a forward and reverse mode AD and supports import of frules and rrules.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Tapir.jl is a reverse-mode add that supports importing a restricted subset of rules defined using rrule. Specifically, rules for functions whose inputs have tangent type Float64 or NoTangent.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"ForwardDiff.jl is not natively compatible with ChainRules. But you can use the package ForwardDiffChainRules.jl to bridge this gap, which is one of the nicest ways to add rules to ForwardDiff.jl.","category":"page"},{"location":"index.html#Key-functionality","page":"Introduction","title":"Key functionality","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Consider a relationship y = f(x), where f is some function. Computing y from x is the original problem, called the primal computation, in contrast to the problem of computing derivatives. We say that the primal function f takes a primal input x and returns the primal output y.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"ChainRules rules are concerned with propagating tangents of primal inputs to tangents of primal outputs (frule, from forwards mode AD), and propagating cotangents of primal outputs to cotangents of primal inputs (rrule, from reverse mode AD). To be able to do that, ChainRules also defines a small number of tangent types to represent tangents and cotangents.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"note: Tangents and cotangents\nStrictly speaking tangents, x = fracdxda, are propagated in frules, and cotangents, x = fracdadx, are propagated in rrules. However, in practice there is rarely a need to distinguish between the two: both are represented by the same tangent types. Thus, except when the detail might clarify, we refer to both as tangents.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"terminology: `frule` and `rrule`\nfrule and rrule are ChainRules specific terms. Their exact functioning is fairly ChainRules specific, though other tools have similar functions. The core notion is sometimes called custom AD primitives, custom adjoints, custom gradients, custom sensitivities. The whole field is a mess for terminology.","category":"page"},{"location":"index.html#Forward-mode-AD-rules-(frules)","page":"Introduction","title":"Forward-mode AD rules (frules)","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"If we know the value of x = fracdxda for some a and we want to know y = fracdyda, the chain rule tells us that y = fracdydx x. Intuitively, we are pushing the derivative forward. This is the basis for forward-mode AD.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"note: frule\nThe frule for f encodes how to propagate the tangent of the primal input (x) to the tangent of the primal output (y).","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The frule signature for a function foo(args...; kwargs...) is","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"function frule((Δself, Δargs...), ::typeof(foo), args...; kwargs...)\n    ...\n    return y, ∂Y\nend","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"where y = foo(args; kwargs...) is the primal output, and ∂Y is the result of propagating the input tangents Δself, Δargs... forwards at the point in the domain of foo described by args. This propagation is called the pushforward. Often we will think of the frule as having the primal computation y = foo(args...; kwargs...), and the pushforward ∂Y = pushforward(Δself, Δargs...), even though they are not present in separate forms in the code.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"For example, the frule for sin(x) is:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"function frule((_, Δx), ::typeof(sin), x)\n    return sin(x), cos(x) * Δx\nend","category":"page"},{"location":"index.html#Reverse-mode-AD-rules-(rrules)","page":"Introduction","title":"Reverse-mode AD rules (rrules)","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"If we know the value of y = fracdady for some a and we want to know x = fracdadx, the chain rule tells us that x =y fracdydx. Intuitively, we are pushing the derivative backward. This is the basis for reverse-mode AD.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"note: rrule\nThe rrule for f encodes how to propagate the cotangents of the primal output (y) to the cotangent of the primal input (x).","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The rrule signature for a function foo(args...; kwargs...) is","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"function rrule(::typeof(foo), args...; kwargs...)\n    ...\n    return y, pullback\nend","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"where y (the primal output) must be equal to foo(args...; kwargs...). pullback is a function to propagate the derivative information backwards at the point in the domain of foo described by args. That pullback function is used like: ∂self, ∂args... = pullback(Δy) Almost always the pullback will be declared locally within the rrule, and will be a closure over some of the other arguments, and potentially over the primal result too.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"For example, the rrule for sin(x) is:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"function rrule(::typeof(sin), x)\n    sin_pullback(Δy) = (NoTangent(), cos(x)' * Δy)\n    return sin(x), sin_pullback\nend","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"note: Why `rrule` returns a pullback but `frule` doesn't return a pushforward\nWhile rrule takes only the arguments to the original function (the primal arguments) and returns a function (the pullback) that operates with the derivative information, the frule does it all at once. This is because the frule fuses the primal computation and the pushforward. This is an optimization that allows frules to contain single large operations that perform both the primal computation and the pushforward at the same time (for example solving an ODE). This operation is only possible in forward mode (where frule is used) because the derivative information needed by the pushforward available with the frule is invoked – it is about the primal function's inputs. In contrast, in reverse mode the derivative information needed by the pullback is about the primal function's output. Thus the reverse mode returns the pullback function which the caller (usually an AD system) keeps hold of until derivative information about the output is available.","category":"page"},{"location":"index.html#Tangent-types","page":"Introduction","title":"Tangent types","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The types of (co)-tangents depend on the types of the primals. Scalar primals are represented by scalar tangents (e.g. Float64 tangent for a Float64 primal). Vector, matrix, and higher rank tensor primals can be represented by vector, matrix and tensor tangents.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"ChainRules defines a Tangent tangent type to represent tangents of structs, Tuples, NamedTuples, and Dicts.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Additionally, for signalling semantics, we distinguish between two tangent types representing a zero tangent. NoTangent type represent situations in which the tangent space does not exist, e.g. an index into an array can not be perturbed. ZeroTangent is used for cases where the tangent happens to be zero, e.g. because the primal argument is not used in the computation.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"We also define Thunks to allow certain optimisation. Thunks are a wrapper over a computation that can potentially be avoided, depending on the downstream use.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"See the section on tangent types for more details.","category":"page"},{"location":"index.html#Example-of-using-ChainRules-directly","page":"Introduction","title":"Example of using ChainRules directly","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"While ChainRules is largely intended as a backend for autodiff systems, it can be used directly. In fact, this can be very useful if you can constrain the code you need to differentiate to only use things that have rules defined for. This was once how all neural network code worked.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Using ChainRules directly also helps get a feel for it.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"using ChainRulesCore\n\nfunction foo(x)\n    a = sin(x)\n    b = 0.2 + a\n    c = asin(b)\n    return c\nend\n\n# Define rules (alternatively get them for free via `using ChainRules`)\n@scalar_rule(sin(x), cos(x))\n@scalar_rule(+(x, y), (1.0, 1.0))\n@scalar_rule(asin(x), inv(sqrt(1 - x^2)))","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"#### Find dfoo/dx via rrules\n#### First the forward pass, gathering up the pullbacks\nx = 3;\na, a_pullback = rrule(sin, x);\nb, b_pullback = rrule(+, 0.2, a);\nc, c_pullback = rrule(asin, b)\n\n#### Then the backward pass calculating gradients\nc̄ = 1;                    # ∂c/∂c\n_, b̄ = c_pullback(c̄);     # ∂c/∂b = ∂c/∂b ⋅ ∂c/∂c\n_, _, ā = b_pullback(b̄);  # ∂c/∂a = ∂c/∂b ⋅ ∂b/∂a\n_, x̄ = a_pullback(ā);     # ∂c/∂x = ∂c/∂a ⋅ ∂a/∂x\nx̄                         # ∂c/∂x = ∂foo/∂x\n# output\n-1.0531613736418153","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"#### Find dfoo/dx via frules\nx = 3;\nẋ = 1;              # ∂x/∂x\nnofields = ZeroTangent();  # ∂self/∂self\n\na, ȧ = frule((nofields, ẋ), sin, x);                    # ∂a/∂x = ∂a/∂x ⋅ ∂x/∂x \nb, ḃ = frule((nofields, ZeroTangent(), ȧ), +, 0.2, a);  # ∂b/∂x = ∂b/∂a ⋅ ∂a/∂x\nc, ċ = frule((nofields, ḃ), asin, b);                   # ∂c/∂x = ∂c/∂b ⋅ ∂b/∂x\nċ                                                       # ∂c/∂x = ∂foo/∂x\n# output\n-1.0531613736418153","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"#### Find dfoo/dx via FiniteDifferences.jl\nusing FiniteDifferences\ncentral_fdm(5, 1)(foo, x)\n# output\n-1.0531613736418257\n\n#### Find dfoo/dx via ForwardDiff.jl\nusing ForwardDiff\nForwardDiff.derivative(foo, x)\n# output\n-1.0531613736418153\n\n#### Find dfoo/dx via Zygote.jl\nusing Zygote\nZygote.gradient(foo, x)\n# output\n(-1.0531613736418153,)","category":"page"},{"location":"ad_author/opt_out.html#Support-opting-out-of-rules","page":"Support opting out of rules","title":"Support opting out of rules","text":"","category":"section"},{"location":"ad_author/opt_out.html","page":"Support opting out of rules","title":"Support opting out of rules","text":"We provide two ways to know that a rule has been opted out of.","category":"page"},{"location":"ad_author/opt_out.html#rrule-/-frule-returns-nothing","page":"Support opting out of rules","title":"rrule / frule returns nothing","text":"","category":"section"},{"location":"ad_author/opt_out.html","page":"Support opting out of rules","title":"Support opting out of rules","text":"@opt_out defines a frule or rrule matching the signature that returns nothing.","category":"page"},{"location":"ad_author/opt_out.html","page":"Support opting out of rules","title":"Support opting out of rules","text":"If you are in a position to generate code, in response to values returned by function calls then you can do something like:","category":"page"},{"location":"ad_author/opt_out.html","page":"Support opting out of rules","title":"Support opting out of rules","text":"res = rrule(f, xs)\nif res === nothing\n    y, pullback = perform_ad_via_decomposition(r, xs)  # do AD without hitting the rrule\nelse\n    y, pullback = res\nend","category":"page"},{"location":"ad_author/opt_out.html","page":"Support opting out of rules","title":"Support opting out of rules","text":"The Julia compiler will specialize based on inferring the return type of rrule, and so can remove that branch.","category":"page"},{"location":"ad_author/opt_out.html#no_rrule-/-no_frule-has-a-method","page":"Support opting out of rules","title":"no_rrule / no_frule has a method","text":"","category":"section"},{"location":"ad_author/opt_out.html","page":"Support opting out of rules","title":"Support opting out of rules","text":"@opt_out also defines a method for  ChainRulesCore.no_frule or ChainRulesCore.no_rrule. The body of this method doesn't matter, what matters is that it is a method-table. A simple thing you can do with this is not support opting out. To do this, filter all methods from the rrule/frule method table that also occur in the no_frule/no_rrule table. This will thus avoid ever hitting an rrule/frule that returns nothing (and thus prevents your library from erroring). This is easily done, though it does mean ignoring the user's stated desire to opt out of the rule.","category":"page"},{"location":"ad_author/opt_out.html","page":"Support opting out of rules","title":"Support opting out of rules","text":"More complex you can use this to generate code that triggers your AD. If for a given signature there is a more specific method in the no_rrule/no_frule method-table, than the one that would be hit from the rrule/frule table (Excluding the one that exactly matches which will return nothing) then you know that the rule should not be used. You can, likely by looking at the primal method table, workout which method you would have it if the rule had not been defined, and then invoke it.","category":"page"},{"location":"rule_author/superpowers/ruleconfig.html#config","page":"RuleConfig","title":"Rule configurations and calling back into AD","text":"","category":"section"},{"location":"rule_author/superpowers/ruleconfig.html","page":"RuleConfig","title":"RuleConfig","text":"RuleConfig is a method for making rules conditionally defined based on the presence of certain features in the AD system. One key such feature is the ability to perform AD either in forwards or reverse mode or both.","category":"page"},{"location":"rule_author/superpowers/ruleconfig.html","page":"RuleConfig","title":"RuleConfig","text":"This is done with a trait-like system (not Holy Traits), where the RuleConfig has a union of types as its only type-parameter. Where each type represents a particular special feature of this AD. To indicate that the AD system has a special property, its RuleConfig should be defined as:","category":"page"},{"location":"rule_author/superpowers/ruleconfig.html","page":"RuleConfig","title":"RuleConfig","text":"struct MyADRuleConfig <: RuleConfig{Union{Feature1, Feature2}} end","category":"page"},{"location":"rule_author/superpowers/ruleconfig.html","page":"RuleConfig","title":"RuleConfig","text":"And rules that should only be defined when an AD has a particular special property write:","category":"page"},{"location":"rule_author/superpowers/ruleconfig.html","page":"RuleConfig","title":"RuleConfig","text":"rrule(::RuleConfig{>:Feature1}, f, args...) = # rrule that should only be define for ADs with `Feature1`\n\nfrule(::RuleConfig{>:Union{Feature1,Feature2}}, f, args...) = # frule that should only be define for ADs with both `Feature1` and `Feature2`","category":"page"},{"location":"rule_author/superpowers/ruleconfig.html","page":"RuleConfig","title":"RuleConfig","text":"warning: Rules with Config always take precedence over rules without\nEven if the other arguments are more specific the rule with the config will always take precedence. For example of there is a rule rrule(::RuleConfig, ::typeof(foo), ::Any) and other rrule(foo, ::Float64), the first will always be selected. This is because the AD will always attempt to provide its config when checking for a rule, and only if that doesn't match, will the config-less rule be tried. In practice this doesn't happen often, but when it does the solution is a little ugly – though very similar to resolving method ambiguities.   You need to manually add methods that dispatch from a rule with config to the one without. See for example the rule for sum(abs2, xs) in ChainRules.jl.","category":"page"},{"location":"rule_author/superpowers/ruleconfig.html","page":"RuleConfig","title":"RuleConfig","text":"A prominent use of this is in declaring that the AD system can, or cannot support being called from within the rule definitions.","category":"page"},{"location":"rule_author/superpowers/ruleconfig.html#Writing-rules-that-call-back-into-AD","page":"RuleConfig","title":"Writing rules that call back into AD","text":"","category":"section"},{"location":"rule_author/superpowers/ruleconfig.html","page":"RuleConfig","title":"RuleConfig","text":"To define e.g. rules for higher order functions, it is useful to be able to call back into the AD system to get it to do some work for you.","category":"page"},{"location":"rule_author/superpowers/ruleconfig.html","page":"RuleConfig","title":"RuleConfig","text":"For example the rule for reverse mode AD for map might like to use forward mode AD if one is available. Particularly for the case where only a single input collection is being mapped over. In that case we know the most efficient way to compute that sub-program is in forwards, as each call with-in the map only takes a single input.","category":"page"},{"location":"rule_author/superpowers/ruleconfig.html","page":"RuleConfig","title":"RuleConfig","text":"Note: the following is not the most efficient rule for map via forward, but attempts to be clearer for demonstration purposes.","category":"page"},{"location":"rule_author/superpowers/ruleconfig.html","page":"RuleConfig","title":"RuleConfig","text":"function rrule(config::RuleConfig{>:HasForwardsMode}, ::typeof(map), f::Function, x::Array{<:Real})\n    # real code would support functors/closures, but in interest of keeping example short we exclude it:\n    @assert (fieldcount(typeof(f)) == 0) \"Functors/Closures are not supported\"\n\n    y_and_ẏ = map(x) do xi\n        frule_via_ad(config, (NoTangent(), one(xi)), f, xi)\n    end\n    y = first.(y_and_ẏ)\n    ẏ = last.(y_and_ẏ)\n\n    pullback_map(ȳ) = NoTangent(), NoTangent(), ȳ .* ẏ\n    return y, pullback_map\nend","category":"page"},{"location":"rule_author/superpowers/ruleconfig.html#Writing-rules-that-depend-on-other-special-requirements-of-the-AD.","page":"RuleConfig","title":"Writing rules that depend on other special requirements of the AD.","text":"","category":"section"},{"location":"rule_author/superpowers/ruleconfig.html","page":"RuleConfig","title":"RuleConfig","text":"The >:HasReverseMode and >:HasForwardsMode are two examples of special properties that a RuleConfig could allow. Others could also exist, but right now they are the only two. It is likely that in the future other such will be provided ","category":"page"},{"location":"rule_author/superpowers/ruleconfig.html","page":"RuleConfig","title":"RuleConfig","text":"Note: you can only depend on the presence of a feature, not its absence. This means we may need to define features and their complements, when one is not the obvious default (as in the case of HasReverseMode/NoReverseMode and HasForwardsMode/NoForwardsMode.).","category":"page"},{"location":"rule_author/superpowers/ruleconfig.html","page":"RuleConfig","title":"RuleConfig","text":"Such special properties generally should only be defined in ChainRulesCore. (Theoretically, they could be defined elsewhere, but the AD and the package containing the rule need to load them, and ChainRulesCore is the place for things like that.)","category":"page"},{"location":"rule_author/superpowers/ruleconfig.html#Writing-rules-that-are-only-for-your-own-AD","page":"RuleConfig","title":"Writing rules that are only for your own AD","text":"","category":"section"},{"location":"rule_author/superpowers/ruleconfig.html","page":"RuleConfig","title":"RuleConfig","text":"A special case of the above is writing rules that are defined only for your own AD. Rules which otherwise would be type-piracy, and would affect other AD systems. This could be done via making up a special property type and dispatching on it. But there is no need, as we can dispatch on the RuleConfig subtype directly.","category":"page"},{"location":"rule_author/superpowers/ruleconfig.html","page":"RuleConfig","title":"RuleConfig","text":"For example in order to avoid mutation in nested AD situations, Zygote might want to have a rule for add!! that makes it just do +.","category":"page"},{"location":"rule_author/superpowers/ruleconfig.html","page":"RuleConfig","title":"RuleConfig","text":"struct ZygoteConfig <: RuleConfig{Union{}} end\n\nrrule(::ZygoteConfig, typeof(ChainRulesCore.add!!), a, b) = a+b, Δ->(NoTangent(), Δ, Δ)","category":"page"},{"location":"rule_author/superpowers/ruleconfig.html","page":"RuleConfig","title":"RuleConfig","text":"As an alternative to rules only for one AD, would be to add new special property definitions to ChainRulesCore (as described above) which would capture what makes that AD special.","category":"page"}]
}
